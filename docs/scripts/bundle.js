(()=>{var __webpack_modules__={538:(module,exports)=>{eval('var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;!function(){var r=null;\n(function(){function X(e){function j(){try{J.doScroll("left")}catch(e){P(j,50);return}w("poll")}function w(j){if(!(j.type=="readystatechange"&&x.readyState!="complete")&&((j.type=="load"?n:x)[z](i+j.type,w,!1),!m&&(m=!0)))e.call(n,j.type||j)}var Y=x.addEventListener,m=!1,C=!0,t=Y?"addEventListener":"attachEvent",z=Y?"removeEventListener":"detachEvent",i=Y?"":"on";if(x.readyState=="complete")e.call(n,"lazy");else{if(x.createEventObject&&J.doScroll){try{C=!n.frameElement}catch(A){}C&&j()}x[t](i+"DOMContentLoaded",\nw,!1);x[t](i+"readystatechange",w,!1);n[t](i+"load",w,!1)}}function Q(){S&&X(function(){var e=K.length;$(e?function(){for(var j=0;j<e;++j)(function(e){P(function(){n.exports[K[e]].apply(n,arguments)},0)})(j)}:void 0)})}for(var n=window,P=n.setTimeout,x=document,J=x.documentElement,L=x.head||x.getElementsByTagName("head")[0]||J,z="",A=x.scripts,m=A.length;--m>=0;){var M=A[m],T=M.src.match(/^[^#?]*\\/run_prettify\\.js(\\?[^#]*)?(?:#.*)?$/);if(T){z=T[1]||"";M.parentNode.removeChild(M);break}}var S=!0,D=\n[],N=[],K=[];z.replace(/[&?]([^&=]+)=([^&]+)/g,function(e,j,w){w=decodeURIComponent(w);j=decodeURIComponent(j);j=="autorun"?S=!/^[0fn]/i.test(w):j=="lang"?D.push(w):j=="skin"?N.push(w):j=="callback"&&K.push(w)});m=0;for(z=D.length;m<z;++m)(function(){var e=x.createElement("script");e.onload=e.onerror=e.onreadystatechange=function(){if(e&&(!e.readyState||/loaded|complete/.test(e.readyState)))e.onerror=e.onload=e.onreadystatechange=r,--R,R||P(Q,0),e.parentNode&&e.parentNode.removeChild(e),e=r};e.type=\n"text/javascript";e.src="https://google-code-prettify.googlecode.com/svn/loader/lang-"+encodeURIComponent(D[m])+".js";L.insertBefore(e,L.firstChild)})(D[m]);for(var R=D.length,A=[],m=0,z=N.length;m<z;++m)A.push("https://google-code-prettify.googlecode.com/svn/loader/skins/"+encodeURIComponent(N[m])+".css");A.push("https://google-code-prettify.googlecode.com/svn/loader/prettify.css");(function(e){function j(m){if(m!==w){var n=x.createElement("link");n.rel="stylesheet";n.type="text/css";if(m+1<w)n.error=\nn.onerror=function(){j(m+1)};n.href=e[m];L.appendChild(n)}}var w=e.length;j(0)})(A);var $=function(){window.PR_SHOULD_USE_CONTINUATION=!0;var e;(function(){function j(a){function d(f){var b=f.charCodeAt(0);if(b!==92)return b;var a=f.charAt(1);return(b=i[a])?b:"0"<=a&&a<="7"?parseInt(f.substring(1),8):a==="u"||a==="x"?parseInt(f.substring(2),16):f.charCodeAt(1)}function h(f){if(f<32)return(f<16?"\\\\x0":"\\\\x")+f.toString(16);f=String.fromCharCode(f);return f==="\\\\"||f==="-"||f==="]"||f==="^"?"\\\\"+f:\nf}function b(f){var b=f.substring(1,f.length-1).match(/\\\\u[\\dA-Fa-f]{4}|\\\\x[\\dA-Fa-f]{2}|\\\\[0-3][0-7]{0,2}|\\\\[0-7]{1,2}|\\\\[\\S\\s]|[^\\\\]/g),f=[],a=b[0]==="^",c=["["];a&&c.push("^");for(var a=a?1:0,g=b.length;a<g;++a){var k=b[a];if(/\\\\[bdsw]/i.test(k))c.push(k);else{var k=d(k),o;a+2<g&&"-"===b[a+1]?(o=d(b[a+2]),a+=2):o=k;f.push([k,o]);o<65||k>122||(o<65||k>90||f.push([Math.max(65,k)|32,Math.min(o,90)|32]),o<97||k>122||f.push([Math.max(97,k)&-33,Math.min(o,122)&-33]))}}f.sort(function(f,a){return f[0]-\na[0]||a[1]-f[1]});b=[];g=[];for(a=0;a<f.length;++a)k=f[a],k[0]<=g[1]+1?g[1]=Math.max(g[1],k[1]):b.push(g=k);for(a=0;a<b.length;++a)k=b[a],c.push(h(k[0])),k[1]>k[0]&&(k[1]+1>k[0]&&c.push("-"),c.push(h(k[1])));c.push("]");return c.join("")}function e(f){for(var a=f.source.match(/\\[(?:[^\\\\\\]]|\\\\[\\S\\s])*]|\\\\u[\\dA-Fa-f]{4}|\\\\x[\\dA-Fa-f]{2}|\\\\\\d+|\\\\[^\\dux]|\\(\\?[!:=]|[()^]|[^()[\\\\^]+/g),c=a.length,d=[],g=0,k=0;g<c;++g){var o=a[g];o==="("?++k:"\\\\"===o.charAt(0)&&(o=+o.substring(1))&&(o<=k?d[o]=-1:a[g]=h(o))}for(g=\n1;g<d.length;++g)-1===d[g]&&(d[g]=++j);for(k=g=0;g<c;++g)o=a[g],o==="("?(++k,d[k]||(a[g]="(?:")):"\\\\"===o.charAt(0)&&(o=+o.substring(1))&&o<=k&&(a[g]="\\\\"+d[o]);for(g=0;g<c;++g)"^"===a[g]&&"^"!==a[g+1]&&(a[g]="");if(f.ignoreCase&&F)for(g=0;g<c;++g)o=a[g],f=o.charAt(0),o.length>=2&&f==="["?a[g]=b(o):f!=="\\\\"&&(a[g]=o.replace(/[A-Za-z]/g,function(a){a=a.charCodeAt(0);return"["+String.fromCharCode(a&-33,a|32)+"]"}));return a.join("")}for(var j=0,F=!1,l=!1,I=0,c=a.length;I<c;++I){var p=a[I];if(p.ignoreCase)l=\n!0;else if(/[a-z]/i.test(p.source.replace(/\\\\u[\\da-f]{4}|\\\\x[\\da-f]{2}|\\\\[^UXux]/gi,""))){F=!0;l=!1;break}}for(var i={b:8,t:9,n:10,v:11,f:12,r:13},q=[],I=0,c=a.length;I<c;++I){p=a[I];if(p.global||p.multiline)throw Error(""+p);q.push("(?:"+e(p)+")")}return RegExp(q.join("|"),l?"gi":"g")}function m(a,d){function h(a){var c=a.nodeType;if(c==1){if(!b.test(a.className)){for(c=a.firstChild;c;c=c.nextSibling)h(c);c=a.nodeName.toLowerCase();if("br"===c||"li"===c)e[l]="\\n",F[l<<1]=j++,F[l++<<1|1]=a}}else if(c==\n3||c==4)c=a.nodeValue,c.length&&(c=d?c.replace(/\\r\\n?/g,"\\n"):c.replace(/[\\t\\n\\r ]+/g," "),e[l]=c,F[l<<1]=j,j+=c.length,F[l++<<1|1]=a)}var b=/(?:^|\\s)nocode(?:\\s|$)/,e=[],j=0,F=[],l=0;h(a);return{a:e.join("").replace(/\\n$/,""),d:F}}function n(a,d,h,b){d&&(a={a:d,e:a},h(a),b.push.apply(b,a.g))}function x(a){for(var d=void 0,h=a.firstChild;h;h=h.nextSibling)var b=h.nodeType,d=b===1?d?a:h:b===3?S.test(h.nodeValue)?a:d:d;return d===a?void 0:d}function C(a,d){function h(a){for(var l=a.e,j=[l,"pln"],c=\n0,p=a.a.match(e)||[],m={},q=0,f=p.length;q<f;++q){var B=p[q],y=m[B],u=void 0,g;if(typeof y==="string")g=!1;else{var k=b[B.charAt(0)];if(k)u=B.match(k[1]),y=k[0];else{for(g=0;g<i;++g)if(k=d[g],u=B.match(k[1])){y=k[0];break}u||(y="pln")}if((g=y.length>=5&&"lang-"===y.substring(0,5))&&!(u&&typeof u[1]==="string"))g=!1,y="src";g||(m[B]=y)}k=c;c+=B.length;if(g){g=u[1];var o=B.indexOf(g),H=o+g.length;u[2]&&(H=B.length-u[2].length,o=H-g.length);y=y.substring(5);n(l+k,B.substring(0,o),h,j);n(l+k+o,g,A(y,\ng),j);n(l+k+H,B.substring(H),h,j)}else j.push(l+k,y)}a.g=j}var b={},e;(function(){for(var h=a.concat(d),l=[],i={},c=0,p=h.length;c<p;++c){var m=h[c],q=m[3];if(q)for(var f=q.length;--f>=0;)b[q.charAt(f)]=m;m=m[1];q=""+m;i.hasOwnProperty(q)||(l.push(m),i[q]=r)}l.push(/[\\S\\s]/);e=j(l)})();var i=d.length;return h}function t(a){var d=[],h=[];a.tripleQuotedStrings?d.push(["str",/^(?:\'\'\'(?:[^\'\\\\]|\\\\[\\S\\s]|\'\'?(?=[^\']))*(?:\'\'\'|$)|"""(?:[^"\\\\]|\\\\[\\S\\s]|""?(?=[^"]))*(?:"""|$)|\'(?:[^\'\\\\]|\\\\[\\S\\s])*(?:\'|$)|"(?:[^"\\\\]|\\\\[\\S\\s])*(?:"|$))/,\nr,"\'\\""]):a.multiLineStrings?d.push(["str",/^(?:\'(?:[^\'\\\\]|\\\\[\\S\\s])*(?:\'|$)|"(?:[^"\\\\]|\\\\[\\S\\s])*(?:"|$)|`(?:[^\\\\`]|\\\\[\\S\\s])*(?:`|$))/,r,"\'\\"`"]):d.push(["str",/^(?:\'(?:[^\\n\\r\'\\\\]|\\\\.)*(?:\'|$)|"(?:[^\\n\\r"\\\\]|\\\\.)*(?:"|$))/,r,"\\"\'"]);a.verbatimStrings&&h.push(["str",/^@"(?:[^"]|"")*(?:"|$)/,r]);var b=a.hashComments;b&&(a.cStyleComments?(b>1?d.push(["com",/^#(?:##(?:[^#]|#(?!##))*(?:###|$)|.*)/,r,"#"]):d.push(["com",/^#(?:(?:define|e(?:l|nd)if|else|error|ifn?def|include|line|pragma|undef|warning)\\b|[^\\n\\r]*)/,\nr,"#"]),h.push(["str",/^<(?:(?:(?:\\.\\.\\/)*|\\/?)(?:[\\w-]+(?:\\/[\\w-]+)+)?[\\w-]+\\.h(?:h|pp|\\+\\+)?|[a-z]\\w*)>/,r])):d.push(["com",/^#[^\\n\\r]*/,r,"#"]));a.cStyleComments&&(h.push(["com",/^\\/\\/[^\\n\\r]*/,r]),h.push(["com",/^\\/\\*[\\S\\s]*?(?:\\*\\/|$)/,r]));if(b=a.regexLiterals){var e=(b=b>1?"":"\\n\\r")?".":"[\\\\S\\\\s]";h.push(["lang-regex",RegExp("^(?:^^\\\\.?|[+-]|[!=]=?=?|\\\\#|%=?|&&?=?|\\\\(|\\\\*=?|[+\\\\-]=|->|\\\\/=?|::?|<<?=?|>>?>?=?|,|;|\\\\?|@|\\\\[|~|{|\\\\^\\\\^?=?|\\\\|\\\\|?=?|break|case|continue|delete|do|else|finally|instanceof|return|throw|try|typeof)\\\\s*("+\n("/(?=[^/*"+b+"])(?:[^/\\\\x5B\\\\x5C"+b+"]|\\\\x5C"+e+"|\\\\x5B(?:[^\\\\x5C\\\\x5D"+b+"]|\\\\x5C"+e+")*(?:\\\\x5D|$))+/")+")")])}(b=a.types)&&h.push(["typ",b]);b=(""+a.keywords).replace(/^ | $/g,"");b.length&&h.push(["kwd",RegExp("^(?:"+b.replace(/[\\s,]+/g,"|")+")\\\\b"),r]);d.push(["pln",/^\\s+/,r," \\r\\n\\t\\u00a0"]);b="^.[^\\\\s\\\\w.$@\'\\"`/\\\\\\\\]*";a.regexLiterals&&(b+="(?!s*/)");h.push(["lit",/^@[$_a-z][\\w$@]*/i,r],["typ",/^(?:[@_]?[A-Z]+[a-z][\\w$@]*|\\w+_t\\b)/,r],["pln",/^[$_a-z][\\w$@]*/i,r],["lit",/^(?:0x[\\da-f]+|(?:\\d(?:_\\d+)*\\d*(?:\\.\\d*)?|\\.\\d\\+)(?:e[+-]?\\d+)?)[a-z]*/i,\nr,"0123456789"],["pln",/^\\\\[\\S\\s]?/,r],["pun",RegExp(b),r]);return C(d,h)}function z(a,d,h){function b(a){var c=a.nodeType;if(c==1&&!j.test(a.className))if("br"===a.nodeName)e(a),a.parentNode&&a.parentNode.removeChild(a);else for(a=a.firstChild;a;a=a.nextSibling)b(a);else if((c==3||c==4)&&h){var d=a.nodeValue,i=d.match(m);if(i)c=d.substring(0,i.index),a.nodeValue=c,(d=d.substring(i.index+i[0].length))&&a.parentNode.insertBefore(l.createTextNode(d),a.nextSibling),e(a),c||a.parentNode.removeChild(a)}}\nfunction e(a){function b(a,c){var d=c?a.cloneNode(!1):a,f=a.parentNode;if(f){var f=b(f,1),h=a.nextSibling;f.appendChild(d);for(var e=h;e;e=h)h=e.nextSibling,f.appendChild(e)}return d}for(;!a.nextSibling;)if(a=a.parentNode,!a)return;for(var a=b(a.nextSibling,0),d;(d=a.parentNode)&&d.nodeType===1;)a=d;c.push(a)}for(var j=/(?:^|\\s)nocode(?:\\s|$)/,m=/\\r\\n?|\\n/,l=a.ownerDocument,i=l.createElement("li");a.firstChild;)i.appendChild(a.firstChild);for(var c=[i],p=0;p<c.length;++p)b(c[p]);d===(d|0)&&c[0].setAttribute("value",\nd);var n=l.createElement("ol");n.className="linenums";for(var d=Math.max(0,d-1|0)||0,p=0,q=c.length;p<q;++p)i=c[p],i.className="L"+(p+d)%10,i.firstChild||i.appendChild(l.createTextNode("\\u00a0")),n.appendChild(i);a.appendChild(n)}function i(a,d){for(var h=d.length;--h>=0;){var b=d[h];U.hasOwnProperty(b)?V.console&&console.warn("cannot override language handler %s",b):U[b]=a}}function A(a,d){if(!a||!U.hasOwnProperty(a))a=/^\\s*</.test(d)?"default-markup":"default-code";return U[a]}function D(a){var d=\na.h;try{var h=m(a.c,a.i),b=h.a;a.a=b;a.d=h.d;a.e=0;A(d,b)(a);var e=/\\bMSIE\\s(\\d+)/.exec(navigator.userAgent),e=e&&+e[1]<=8,d=/\\n/g,i=a.a,j=i.length,h=0,l=a.d,n=l.length,b=0,c=a.g,p=c.length,t=0;c[p]=j;var q,f;for(f=q=0;f<p;)c[f]!==c[f+2]?(c[q++]=c[f++],c[q++]=c[f++]):f+=2;p=q;for(f=q=0;f<p;){for(var x=c[f],y=c[f+1],u=f+2;u+2<=p&&c[u+1]===y;)u+=2;c[q++]=x;c[q++]=y;f=u}c.length=q;var g=a.c,k;if(g)k=g.style.display,g.style.display="none";try{for(;b<n;){var o=l[b+2]||j,H=c[t+2]||j,u=Math.min(o,H),E=l[b+\n1],W;if(E.nodeType!==1&&(W=i.substring(h,u))){e&&(W=W.replace(d,"\\r"));E.nodeValue=W;var Z=E.ownerDocument,s=Z.createElement("span");s.className=c[t+1];var z=E.parentNode;z.replaceChild(s,E);s.appendChild(E);h<o&&(l[b+1]=E=Z.createTextNode(i.substring(u,o)),z.insertBefore(E,s.nextSibling))}h=u;h>=o&&(b+=2);h>=H&&(t+=2)}}finally{if(g)g.style.display=k}}catch(v){V.console&&console.log(v&&v.stack||v)}}var V=window,G=["break,continue,do,else,for,if,return,while"],O=[[G,"auto,case,char,const,default,double,enum,extern,float,goto,inline,int,long,register,short,signed,sizeof,static,struct,switch,typedef,union,unsigned,void,volatile"],\n"catch,class,delete,false,import,new,operator,private,protected,public,this,throw,true,try,typeof"],J=[O,"alignof,align_union,asm,axiom,bool,concept,concept_map,const_cast,constexpr,decltype,delegate,dynamic_cast,explicit,export,friend,generic,late_check,mutable,namespace,nullptr,property,reinterpret_cast,static_assert,static_cast,template,typeid,typename,using,virtual,where"],K=[O,"abstract,assert,boolean,byte,extends,final,finally,implements,import,instanceof,interface,null,native,package,strictfp,super,synchronized,throws,transient"],\nL=[K,"as,base,by,checked,decimal,delegate,descending,dynamic,event,fixed,foreach,from,group,implicit,in,internal,into,is,let,lock,object,out,override,orderby,params,partial,readonly,ref,sbyte,sealed,stackalloc,string,select,uint,ulong,unchecked,unsafe,ushort,var,virtual,where"],O=[O,"debugger,eval,export,function,get,null,set,undefined,var,with,Infinity,NaN"],M=[G,"and,as,assert,class,def,del,elif,except,exec,finally,from,global,import,in,is,lambda,nonlocal,not,or,pass,print,raise,try,with,yield,False,True,None"],\nN=[G,"alias,and,begin,case,class,def,defined,elsif,end,ensure,false,in,module,next,nil,not,or,redo,rescue,retry,self,super,then,true,undef,unless,until,when,yield,BEGIN,END"],R=[G,"as,assert,const,copy,drop,enum,extern,fail,false,fn,impl,let,log,loop,match,mod,move,mut,priv,pub,pure,ref,self,static,struct,true,trait,type,unsafe,use"],G=[G,"case,done,elif,esac,eval,fi,function,in,local,set,then,until"],Q=/^(DIR|FILE|vector|(de|priority_)?queue|list|stack|(const_)?iterator|(multi)?(set|map)|bitset|u?(int|float)\\d*)\\b/,\nS=/\\S/,T=t({keywords:[J,L,O,"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",M,N,G],hashComments:!0,cStyleComments:!0,multiLineStrings:!0,regexLiterals:!0}),U={};i(T,["default-code"]);i(C([],[["pln",/^[^<?]+/],["dec",/^<!\\w[^>]*(?:>|$)/],["com",/^<\\!--[\\S\\s]*?(?:--\\>|$)/],["lang-",/^<\\?([\\S\\s]+?)(?:\\?>|$)/],["lang-",/^<%([\\S\\s]+?)(?:%>|$)/],["pun",/^(?:<[%?]|[%?]>)/],["lang-",\n/^<xmp\\b[^>]*>([\\S\\s]+?)<\\/xmp\\b[^>]*>/i],["lang-js",/^<script\\b[^>]*>([\\S\\s]*?)(<\\/script\\b[^>]*>)/i],["lang-css",/^<style\\b[^>]*>([\\S\\s]*?)(<\\/style\\b[^>]*>)/i],["lang-in.tag",/^(<\\/?[a-z][^<>]*>)/i]]),["default-markup","htm","html","mxml","xhtml","xml","xsl"]);i(C([["pln",/^\\s+/,r," \\t\\r\\n"],["atv",/^(?:"[^"]*"?|\'[^\']*\'?)/,r,"\\"\'"]],[["tag",/^^<\\/?[a-z](?:[\\w-.:]*\\w)?|\\/?>$/i],["atn",/^(?!style[\\s=]|on)[a-z](?:[\\w:-]*\\w)?/i],["lang-uq.val",/^=\\s*([^\\s"\'>]*(?:[^\\s"\'/>]|\\/(?=\\s)))/],["pun",/^[/<->]+/],\n["lang-js",/^on\\w+\\s*=\\s*"([^"]+)"/i],["lang-js",/^on\\w+\\s*=\\s*\'([^\']+)\'/i],["lang-js",/^on\\w+\\s*=\\s*([^\\s"\'>]+)/i],["lang-css",/^style\\s*=\\s*"([^"]+)"/i],["lang-css",/^style\\s*=\\s*\'([^\']+)\'/i],["lang-css",/^style\\s*=\\s*([^\\s"\'>]+)/i]]),["in.tag"]);i(C([],[["atv",/^[\\S\\s]+/]]),["uq.val"]);i(t({keywords:J,hashComments:!0,cStyleComments:!0,types:Q}),["c","cc","cpp","cxx","cyc","m"]);i(t({keywords:"null,true,false"}),["json"]);i(t({keywords:L,hashComments:!0,cStyleComments:!0,verbatimStrings:!0,types:Q}),\n["cs"]);i(t({keywords:K,cStyleComments:!0}),["java"]);i(t({keywords:G,hashComments:!0,multiLineStrings:!0}),["bash","bsh","csh","sh"]);i(t({keywords:M,hashComments:!0,multiLineStrings:!0,tripleQuotedStrings:!0}),["cv","py","python"]);i(t({keywords:"caller,delete,die,do,dump,elsif,eval,exit,foreach,for,goto,if,import,last,local,my,next,no,our,print,package,redo,require,sub,undef,unless,until,use,wantarray,while,BEGIN,END",hashComments:!0,multiLineStrings:!0,regexLiterals:2}),["perl","pl","pm"]);i(t({keywords:N,\nhashComments:!0,multiLineStrings:!0,regexLiterals:!0}),["rb","ruby"]);i(t({keywords:O,cStyleComments:!0,regexLiterals:!0}),["javascript","js"]);i(t({keywords:"all,and,by,catch,class,else,extends,false,finally,for,if,in,is,isnt,loop,new,no,not,null,of,off,on,or,return,super,then,throw,true,try,unless,until,when,while,yes",hashComments:3,cStyleComments:!0,multilineStrings:!0,tripleQuotedStrings:!0,regexLiterals:!0}),["coffee"]);i(t({keywords:R,cStyleComments:!0,multilineStrings:!0}),["rc","rs","rust"]);\ni(C([],[["str",/^[\\S\\s]+/]]),["regex"]);var X=V.PR={createSimpleLexer:C,registerLangHandler:i,sourceDecorator:t,PR_ATTRIB_NAME:"atn",PR_ATTRIB_VALUE:"atv",PR_COMMENT:"com",PR_DECLARATION:"dec",PR_KEYWORD:"kwd",PR_LITERAL:"lit",PR_NOCODE:"nocode",PR_PLAIN:"pln",PR_PUNCTUATION:"pun",PR_SOURCE:"src",PR_STRING:"str",PR_TAG:"tag",PR_TYPE:"typ",prettyPrintOne:function(a,d,e){var b=document.createElement("div");b.innerHTML="<pre>"+a+"</pre>";b=b.firstChild;e&&z(b,e,!0);D({h:d,j:e,c:b,i:1});return b.innerHTML},\nprettyPrint:e=e=function(a,d){function e(){for(var b=V.PR_SHOULD_USE_CONTINUATION?c.now()+250:Infinity;p<j.length&&c.now()<b;p++){for(var d=j[p],m=k,l=d;l=l.previousSibling;){var n=l.nodeType,s=(n===7||n===8)&&l.nodeValue;if(s?!/^\\??prettify\\b/.test(s):n!==3||/\\S/.test(l.nodeValue))break;if(s){m={};s.replace(/\\b(\\w+)=([\\w%+\\-.:]+)/g,function(a,b,c){m[b]=c});break}}l=d.className;if((m!==k||f.test(l))&&!w.test(l)){n=!1;for(s=d.parentNode;s;s=s.parentNode)if(g.test(s.tagName)&&s.className&&f.test(s.className)){n=\n!0;break}if(!n){d.className+=" prettyprinted";n=m.lang;if(!n){var n=l.match(q),A;if(!n&&(A=x(d))&&u.test(A.tagName))n=A.className.match(q);n&&(n=n[1])}if(y.test(d.tagName))s=1;else var s=d.currentStyle,v=i.defaultView,s=(s=s?s.whiteSpace:v&&v.getComputedStyle?v.getComputedStyle(d,r).getPropertyValue("white-space"):0)&&"pre"===s.substring(0,3);v=m.linenums;if(!(v=v==="true"||+v))v=(v=l.match(/\\blinenums\\b(?::(\\d+))?/))?v[1]&&v[1].length?+v[1]:!0:!1;v&&z(d,v,s);t={h:n,c:d,j:v,i:s};D(t)}}}p<j.length?\nP(e,250):"function"===typeof a&&a()}for(var b=d||document.body,i=b.ownerDocument||document,b=[b.getElementsByTagName("pre"),b.getElementsByTagName("code"),b.getElementsByTagName("xmp")],j=[],m=0;m<b.length;++m)for(var l=0,n=b[m].length;l<n;++l)j.push(b[m][l]);var b=r,c=Date;c.now||(c={now:function(){return+new Date}});var p=0,t,q=/\\blang(?:uage)?-([\\w.]+)(?!\\S)/,f=/\\bprettyprint\\b/,w=/\\bprettyprinted\\b/,y=/pre|xmp/i,u=/^code$/i,g=/^(?:pre|code|xmp)$/i,k={};e()}}; true&&\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function(){return X}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))})();return e}();R||P(Q,0)})();}()\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///538\n')},992:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nvar _a;\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.CSS = void 0;\nvar _constants_1 = __webpack_require__(37);\nvar _helpers_1 = __webpack_require__(489);\nexports.CSS = (_a = {},\n    _a[_constants_1.ColorModel.HEX] = function (color) { return "#" + _helpers_1.toHEX(color.r) + _helpers_1.toHEX(color.g) + _helpers_1.toHEX(color.b) + (_helpers_1.hasProp(color, \'a\') && _helpers_1.toHEX(color.a) || \'\'); },\n    _a[_constants_1.ColorModel.RGB] = function (color) { return "rgb" + (_helpers_1.hasProp(color, \'a\') && \'a\' || \'\') + "(" + _helpers_1.round(color.r) + "," + _helpers_1.round(color.g) + "," + _helpers_1.round(color.b) + (_helpers_1.hasProp(color, \'a\') && "," + _helpers_1.round(color.a, 2) || \'\') + ")"; },\n    _a[_constants_1.ColorModel.HSL] = function (color) { return "hsl" + (_helpers_1.hasProp(color, \'a\') && \'a\' || \'\') + "(" + _helpers_1.round(color.h) + "," + _helpers_1.round(color.s) + "%," + _helpers_1.round(color.l) + "%" + (_helpers_1.hasProp(color, \'a\') && "," + _helpers_1.round(color.a, 2) || \'\') + ")"; },\n    _a[_constants_1.ColorModel.CMYK] = function (color) { return "cmyk(" + _helpers_1.round(color.c) + "%," + _helpers_1.round(color.m) + "%," + _helpers_1.round(color.y) + "%," + _helpers_1.round(color.k) + "%)"; },\n    _a);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvY29sb3IvY3NzLnRzPzZiMTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDhDQUE2QyxDQUFDLGNBQWMsRUFBQztBQUM3RCxXQUFXO0FBQ1gsbUJBQW1CLG1CQUFPLENBQUMsRUFBWTtBQUN2QyxpQkFBaUIsbUJBQU8sQ0FBQyxHQUFVO0FBQ25DLFdBQVcsV0FBVztBQUN0Qix3REFBd0Qsc0tBQXNLLEVBQUU7QUFDaE8sd0RBQXdELHlQQUF5UCxFQUFFO0FBQ25ULHdEQUF3RCxnUUFBZ1EsRUFBRTtBQUMxVCx5REFBeUQsNEpBQTRKLEVBQUU7QUFDdk4iLCJmaWxlIjoiOTkyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX2E7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNTUyA9IHZvaWQgMDtcbnZhciBfY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiI2NvbnN0YW50c1wiKTtcbnZhciBfaGVscGVyc18xID0gcmVxdWlyZShcIiNoZWxwZXJzXCIpO1xuZXhwb3J0cy5DU1MgPSAoX2EgPSB7fSxcbiAgICBfYVtfY29uc3RhbnRzXzEuQ29sb3JNb2RlbC5IRVhdID0gZnVuY3Rpb24gKGNvbG9yKSB7IHJldHVybiBcIiNcIiArIF9oZWxwZXJzXzEudG9IRVgoY29sb3IucikgKyBfaGVscGVyc18xLnRvSEVYKGNvbG9yLmcpICsgX2hlbHBlcnNfMS50b0hFWChjb2xvci5iKSArIChfaGVscGVyc18xLmhhc1Byb3AoY29sb3IsICdhJykgJiYgX2hlbHBlcnNfMS50b0hFWChjb2xvci5hKSB8fCAnJyk7IH0sXG4gICAgX2FbX2NvbnN0YW50c18xLkNvbG9yTW9kZWwuUkdCXSA9IGZ1bmN0aW9uIChjb2xvcikgeyByZXR1cm4gXCJyZ2JcIiArIChfaGVscGVyc18xLmhhc1Byb3AoY29sb3IsICdhJykgJiYgJ2EnIHx8ICcnKSArIFwiKFwiICsgX2hlbHBlcnNfMS5yb3VuZChjb2xvci5yKSArIFwiLFwiICsgX2hlbHBlcnNfMS5yb3VuZChjb2xvci5nKSArIFwiLFwiICsgX2hlbHBlcnNfMS5yb3VuZChjb2xvci5iKSArIChfaGVscGVyc18xLmhhc1Byb3AoY29sb3IsICdhJykgJiYgXCIsXCIgKyBfaGVscGVyc18xLnJvdW5kKGNvbG9yLmEsIDIpIHx8ICcnKSArIFwiKVwiOyB9LFxuICAgIF9hW19jb25zdGFudHNfMS5Db2xvck1vZGVsLkhTTF0gPSBmdW5jdGlvbiAoY29sb3IpIHsgcmV0dXJuIFwiaHNsXCIgKyAoX2hlbHBlcnNfMS5oYXNQcm9wKGNvbG9yLCAnYScpICYmICdhJyB8fCAnJykgKyBcIihcIiArIF9oZWxwZXJzXzEucm91bmQoY29sb3IuaCkgKyBcIixcIiArIF9oZWxwZXJzXzEucm91bmQoY29sb3IucykgKyBcIiUsXCIgKyBfaGVscGVyc18xLnJvdW5kKGNvbG9yLmwpICsgXCIlXCIgKyAoX2hlbHBlcnNfMS5oYXNQcm9wKGNvbG9yLCAnYScpICYmIFwiLFwiICsgX2hlbHBlcnNfMS5yb3VuZChjb2xvci5hLCAyKSB8fCAnJykgKyBcIilcIjsgfSxcbiAgICBfYVtfY29uc3RhbnRzXzEuQ29sb3JNb2RlbC5DTVlLXSA9IGZ1bmN0aW9uIChjb2xvcikgeyByZXR1cm4gXCJjbXlrKFwiICsgX2hlbHBlcnNfMS5yb3VuZChjb2xvci5jKSArIFwiJSxcIiArIF9oZWxwZXJzXzEucm91bmQoY29sb3IubSkgKyBcIiUsXCIgKyBfaGVscGVyc18xLnJvdW5kKGNvbG9yLnkpICsgXCIlLFwiICsgX2hlbHBlcnNfMS5yb3VuZChjb2xvci5rKSArIFwiJSlcIjsgfSxcbiAgICBfYSk7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///992\n')},765:(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.hueRYB = exports.rybToRGB = exports.rgbToRYB = exports.rgbToHSL = exports.rgbToCMYK = exports.cmykToRGB = exports.hslToRGB = exports.hueToRGB = void 0;\nvar hueToRGB = function (t1, t2, hue) {\n    if (hue < 0) {\n        hue += 6;\n    }\n    if (hue >= 6) {\n        hue -= 6;\n    }\n    if (hue < 1) {\n        return Math.round(((t2 - t1) * hue + t1) * 255);\n    }\n    else if (hue < 3) {\n        return Math.round(t2 * 255);\n    }\n    else if (hue < 4) {\n        return Math.round(((t2 - t1) * (4 - hue) + t1) * 255);\n    }\n    else {\n        return Math.round(t1 * 255);\n    }\n};\nexports.hueToRGB = hueToRGB;\nvar hslToRGB = function (h, s, l) {\n    h /= 60;\n    s /= 100;\n    l /= 100;\n    var t2 = (l <= .5)\n        ? l * (s + 1)\n        : l + s - (l * s);\n    var t1 = l * 2 - t2;\n    var r = exports.hueToRGB(t1, t2, h + 2);\n    var g = exports.hueToRGB(t1, t2, h);\n    var b = exports.hueToRGB(t1, t2, h - 2);\n    return { r: r, g: g, b: b };\n};\nexports.hslToRGB = hslToRGB;\nvar cmykToRGB = function (c, m, y, k) {\n    k = 1 - k;\n    var r = Math.round(255 * (1 - c) * k);\n    var g = Math.round(255 * (1 - m) * k);\n    var b = Math.round(255 * (1 - y) * k);\n    return { r: r, g: g, b: b };\n};\nexports.cmykToRGB = cmykToRGB;\nvar rgbToCMYK = function (r, g, b) {\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    var k = 1 - Math.max(r, g, b);\n    var k1 = 1 - k;\n    var c = (k1 - r) / k1;\n    var m = (k1 - g) / k1;\n    var y = (k1 - b) / k1;\n    return {\n        c: Math.round(c * 100),\n        m: Math.round(m * 100),\n        y: Math.round(y * 100),\n        k: Math.round(k * 100)\n    };\n};\nexports.rgbToCMYK = rgbToCMYK;\nvar rgbToHSL = function (r, g, b, a) {\n    if (a === void 0) { a = 1; }\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    a = Math.min(a, 1);\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var d = max - min;\n    var h = 0;\n    var s = 0;\n    var l = (max + min) / 2;\n    if (d === 0) {\n        h = 0;\n        s = 0;\n    }\n    else {\n        switch (max) {\n            case r:\n                h = ((g - b) / d) % 6;\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n        }\n        h = Math.round(h * 60);\n        if (h < 0) {\n            h += 360;\n        }\n        s = d / (1 - Math.abs(2 * l - 1));\n    }\n    return {\n        h: h,\n        s: Math.round(s * 100),\n        l: Math.round(l * 100),\n        a: a\n    };\n};\nexports.rgbToHSL = rgbToHSL;\nvar rgbToRYB = function (r, g, b) {\n    var Iw = Math.min(r, g, b);\n    var Ib = Math.min(255 - r, 255 - g, 255 - b);\n    var rRGB = r - Iw;\n    var gRGB = g - Iw;\n    var bRGB = b - Iw;\n    var minRG = Math.min(rRGB, gRGB);\n    var rRYB = rRGB - minRG;\n    var yRYB = (gRGB + minRG) / 2;\n    var bRYB = (bRGB + gRGB - minRG) / 2;\n    var n = Math.max(rRYB, yRYB, bRYB) / Math.max(rRGB, gRGB, bRGB);\n    var N = isNaN(n) || n === Infinity || n <= 0 ? 1 : n;\n    return {\n        r: rRYB / N + Ib,\n        y: yRYB / N + Ib,\n        b: bRYB / N + Ib\n    };\n};\nexports.rgbToRYB = rgbToRYB;\nvar rybToRGB = function (r, y, b) {\n    var Iw = Math.min(r, y, b);\n    var Ib = Math.min(255 - r, 255 - y, 255 - b);\n    var rRYB = r - Iw;\n    var yRYB = y - Iw;\n    var bRYB = b - Iw;\n    var minYB = Math.min(yRYB, bRYB);\n    var rRGB = rRYB + yRYB - minYB;\n    var gRGB = yRYB + 2 * minYB;\n    var bRGB = 2 * (bRYB - minYB);\n    var n = Math.max(rRGB, gRGB, bRGB) / Math.max(rRYB, yRYB, bRYB);\n    var N = isNaN(n) || n === Infinity || n <= 0 ? 1 : n;\n    return {\n        r: rRGB / N + Ib,\n        g: gRGB / N + Ib,\n        b: bRGB / N + Ib\n    };\n};\nexports.rybToRGB = rybToRGB;\nvar hueRYB = function (hue, toRYB) {\n    if (hue < 0)\n        hue += 360;\n    if (hue > 360)\n        hue -= 360;\n    if (hue === 360 || hue === 0)\n        return hue;\n    var map1 = [[0, 120], [120, 180], [180, 240], [240, 360]];\n    var map2 = [[0, 60], [60, 120], [120, 240], [240, 360]];\n    var from = toRYB ? map1 : map2;\n    var to = toRYB ? map2 : map1;\n    var a = 0;\n    var b = 0;\n    var c = 0;\n    var d = 0;\n    from.find(function (arr, index) {\n        if (hue >= arr[0] && hue < arr[1]) {\n            a = arr[0];\n            b = arr[1];\n            c = to[index][0];\n            d = to[index][1];\n            return true;\n        }\n        return false;\n    });\n    return c + (hue - a) * ((d - c) / (b - a));\n};\nexports.hueRYB = hueRYB;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvY29sb3IvdHJhbnNsYXRvcnMudHM/OWY3MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxDQUFDLGNBQWMsRUFBQztBQUM3RCxjQUFjLEdBQUcsZ0JBQWdCLEdBQUcsZ0JBQWdCLEdBQUcsZ0JBQWdCLEdBQUcsaUJBQWlCLEdBQUcsaUJBQWlCLEdBQUcsZ0JBQWdCLEdBQUcsZ0JBQWdCO0FBQ3JKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsdUJBQXVCLE9BQU87QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxjQUFjIiwiZmlsZSI6Ijc2NS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5odWVSWUIgPSBleHBvcnRzLnJ5YlRvUkdCID0gZXhwb3J0cy5yZ2JUb1JZQiA9IGV4cG9ydHMucmdiVG9IU0wgPSBleHBvcnRzLnJnYlRvQ01ZSyA9IGV4cG9ydHMuY215a1RvUkdCID0gZXhwb3J0cy5oc2xUb1JHQiA9IGV4cG9ydHMuaHVlVG9SR0IgPSB2b2lkIDA7XG52YXIgaHVlVG9SR0IgPSBmdW5jdGlvbiAodDEsIHQyLCBodWUpIHtcbiAgICBpZiAoaHVlIDwgMCkge1xuICAgICAgICBodWUgKz0gNjtcbiAgICB9XG4gICAgaWYgKGh1ZSA+PSA2KSB7XG4gICAgICAgIGh1ZSAtPSA2O1xuICAgIH1cbiAgICBpZiAoaHVlIDwgMSkge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgoKHQyIC0gdDEpICogaHVlICsgdDEpICogMjU1KTtcbiAgICB9XG4gICAgZWxzZSBpZiAoaHVlIDwgMykge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh0MiAqIDI1NSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGh1ZSA8IDQpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoKCh0MiAtIHQxKSAqICg0IC0gaHVlKSArIHQxKSAqIDI1NSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCh0MSAqIDI1NSk7XG4gICAgfVxufTtcbmV4cG9ydHMuaHVlVG9SR0IgPSBodWVUb1JHQjtcbnZhciBoc2xUb1JHQiA9IGZ1bmN0aW9uIChoLCBzLCBsKSB7XG4gICAgaCAvPSA2MDtcbiAgICBzIC89IDEwMDtcbiAgICBsIC89IDEwMDtcbiAgICB2YXIgdDIgPSAobCA8PSAuNSlcbiAgICAgICAgPyBsICogKHMgKyAxKVxuICAgICAgICA6IGwgKyBzIC0gKGwgKiBzKTtcbiAgICB2YXIgdDEgPSBsICogMiAtIHQyO1xuICAgIHZhciByID0gZXhwb3J0cy5odWVUb1JHQih0MSwgdDIsIGggKyAyKTtcbiAgICB2YXIgZyA9IGV4cG9ydHMuaHVlVG9SR0IodDEsIHQyLCBoKTtcbiAgICB2YXIgYiA9IGV4cG9ydHMuaHVlVG9SR0IodDEsIHQyLCBoIC0gMik7XG4gICAgcmV0dXJuIHsgcjogciwgZzogZywgYjogYiB9O1xufTtcbmV4cG9ydHMuaHNsVG9SR0IgPSBoc2xUb1JHQjtcbnZhciBjbXlrVG9SR0IgPSBmdW5jdGlvbiAoYywgbSwgeSwgaykge1xuICAgIGsgPSAxIC0gaztcbiAgICB2YXIgciA9IE1hdGgucm91bmQoMjU1ICogKDEgLSBjKSAqIGspO1xuICAgIHZhciBnID0gTWF0aC5yb3VuZCgyNTUgKiAoMSAtIG0pICogayk7XG4gICAgdmFyIGIgPSBNYXRoLnJvdW5kKDI1NSAqICgxIC0geSkgKiBrKTtcbiAgICByZXR1cm4geyByOiByLCBnOiBnLCBiOiBiIH07XG59O1xuZXhwb3J0cy5jbXlrVG9SR0IgPSBjbXlrVG9SR0I7XG52YXIgcmdiVG9DTVlLID0gZnVuY3Rpb24gKHIsIGcsIGIpIHtcbiAgICByIC89IDI1NTtcbiAgICBnIC89IDI1NTtcbiAgICBiIC89IDI1NTtcbiAgICB2YXIgayA9IDEgLSBNYXRoLm1heChyLCBnLCBiKTtcbiAgICB2YXIgazEgPSAxIC0gaztcbiAgICB2YXIgYyA9IChrMSAtIHIpIC8gazE7XG4gICAgdmFyIG0gPSAoazEgLSBnKSAvIGsxO1xuICAgIHZhciB5ID0gKGsxIC0gYikgLyBrMTtcbiAgICByZXR1cm4ge1xuICAgICAgICBjOiBNYXRoLnJvdW5kKGMgKiAxMDApLFxuICAgICAgICBtOiBNYXRoLnJvdW5kKG0gKiAxMDApLFxuICAgICAgICB5OiBNYXRoLnJvdW5kKHkgKiAxMDApLFxuICAgICAgICBrOiBNYXRoLnJvdW5kKGsgKiAxMDApXG4gICAgfTtcbn07XG5leHBvcnRzLnJnYlRvQ01ZSyA9IHJnYlRvQ01ZSztcbnZhciByZ2JUb0hTTCA9IGZ1bmN0aW9uIChyLCBnLCBiLCBhKSB7XG4gICAgaWYgKGEgPT09IHZvaWQgMCkgeyBhID0gMTsgfVxuICAgIHIgLz0gMjU1O1xuICAgIGcgLz0gMjU1O1xuICAgIGIgLz0gMjU1O1xuICAgIGEgPSBNYXRoLm1pbihhLCAxKTtcbiAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgdmFyIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIHZhciBkID0gbWF4IC0gbWluO1xuICAgIHZhciBoID0gMDtcbiAgICB2YXIgcyA9IDA7XG4gICAgdmFyIGwgPSAobWF4ICsgbWluKSAvIDI7XG4gICAgaWYgKGQgPT09IDApIHtcbiAgICAgICAgaCA9IDA7XG4gICAgICAgIHMgPSAwO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgc3dpdGNoIChtYXgpIHtcbiAgICAgICAgICAgIGNhc2UgcjpcbiAgICAgICAgICAgICAgICBoID0gKChnIC0gYikgLyBkKSAlIDY7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIGc6XG4gICAgICAgICAgICAgICAgaCA9IChiIC0gcikgLyBkICsgMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgYjpcbiAgICAgICAgICAgICAgICBoID0gKHIgLSBnKSAvIGQgKyA0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGggPSBNYXRoLnJvdW5kKGggKiA2MCk7XG4gICAgICAgIGlmIChoIDwgMCkge1xuICAgICAgICAgICAgaCArPSAzNjA7XG4gICAgICAgIH1cbiAgICAgICAgcyA9IGQgLyAoMSAtIE1hdGguYWJzKDIgKiBsIC0gMSkpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBoOiBoLFxuICAgICAgICBzOiBNYXRoLnJvdW5kKHMgKiAxMDApLFxuICAgICAgICBsOiBNYXRoLnJvdW5kKGwgKiAxMDApLFxuICAgICAgICBhOiBhXG4gICAgfTtcbn07XG5leHBvcnRzLnJnYlRvSFNMID0gcmdiVG9IU0w7XG52YXIgcmdiVG9SWUIgPSBmdW5jdGlvbiAociwgZywgYikge1xuICAgIHZhciBJdyA9IE1hdGgubWluKHIsIGcsIGIpO1xuICAgIHZhciBJYiA9IE1hdGgubWluKDI1NSAtIHIsIDI1NSAtIGcsIDI1NSAtIGIpO1xuICAgIHZhciByUkdCID0gciAtIEl3O1xuICAgIHZhciBnUkdCID0gZyAtIEl3O1xuICAgIHZhciBiUkdCID0gYiAtIEl3O1xuICAgIHZhciBtaW5SRyA9IE1hdGgubWluKHJSR0IsIGdSR0IpO1xuICAgIHZhciByUllCID0gclJHQiAtIG1pblJHO1xuICAgIHZhciB5UllCID0gKGdSR0IgKyBtaW5SRykgLyAyO1xuICAgIHZhciBiUllCID0gKGJSR0IgKyBnUkdCIC0gbWluUkcpIC8gMjtcbiAgICB2YXIgbiA9IE1hdGgubWF4KHJSWUIsIHlSWUIsIGJSWUIpIC8gTWF0aC5tYXgoclJHQiwgZ1JHQiwgYlJHQik7XG4gICAgdmFyIE4gPSBpc05hTihuKSB8fCBuID09PSBJbmZpbml0eSB8fCBuIDw9IDAgPyAxIDogbjtcbiAgICByZXR1cm4ge1xuICAgICAgICByOiByUllCIC8gTiArIEliLFxuICAgICAgICB5OiB5UllCIC8gTiArIEliLFxuICAgICAgICBiOiBiUllCIC8gTiArIEliXG4gICAgfTtcbn07XG5leHBvcnRzLnJnYlRvUllCID0gcmdiVG9SWUI7XG52YXIgcnliVG9SR0IgPSBmdW5jdGlvbiAociwgeSwgYikge1xuICAgIHZhciBJdyA9IE1hdGgubWluKHIsIHksIGIpO1xuICAgIHZhciBJYiA9IE1hdGgubWluKDI1NSAtIHIsIDI1NSAtIHksIDI1NSAtIGIpO1xuICAgIHZhciByUllCID0gciAtIEl3O1xuICAgIHZhciB5UllCID0geSAtIEl3O1xuICAgIHZhciBiUllCID0gYiAtIEl3O1xuICAgIHZhciBtaW5ZQiA9IE1hdGgubWluKHlSWUIsIGJSWUIpO1xuICAgIHZhciByUkdCID0gclJZQiArIHlSWUIgLSBtaW5ZQjtcbiAgICB2YXIgZ1JHQiA9IHlSWUIgKyAyICogbWluWUI7XG4gICAgdmFyIGJSR0IgPSAyICogKGJSWUIgLSBtaW5ZQik7XG4gICAgdmFyIG4gPSBNYXRoLm1heChyUkdCLCBnUkdCLCBiUkdCKSAvIE1hdGgubWF4KHJSWUIsIHlSWUIsIGJSWUIpO1xuICAgIHZhciBOID0gaXNOYU4obikgfHwgbiA9PT0gSW5maW5pdHkgfHwgbiA8PSAwID8gMSA6IG47XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcjogclJHQiAvIE4gKyBJYixcbiAgICAgICAgZzogZ1JHQiAvIE4gKyBJYixcbiAgICAgICAgYjogYlJHQiAvIE4gKyBJYlxuICAgIH07XG59O1xuZXhwb3J0cy5yeWJUb1JHQiA9IHJ5YlRvUkdCO1xudmFyIGh1ZVJZQiA9IGZ1bmN0aW9uIChodWUsIHRvUllCKSB7XG4gICAgaWYgKGh1ZSA8IDApXG4gICAgICAgIGh1ZSArPSAzNjA7XG4gICAgaWYgKGh1ZSA+IDM2MClcbiAgICAgICAgaHVlIC09IDM2MDtcbiAgICBpZiAoaHVlID09PSAzNjAgfHwgaHVlID09PSAwKVxuICAgICAgICByZXR1cm4gaHVlO1xuICAgIHZhciBtYXAxID0gW1swLCAxMjBdLCBbMTIwLCAxODBdLCBbMTgwLCAyNDBdLCBbMjQwLCAzNjBdXTtcbiAgICB2YXIgbWFwMiA9IFtbMCwgNjBdLCBbNjAsIDEyMF0sIFsxMjAsIDI0MF0sIFsyNDAsIDM2MF1dO1xuICAgIHZhciBmcm9tID0gdG9SWUIgPyBtYXAxIDogbWFwMjtcbiAgICB2YXIgdG8gPSB0b1JZQiA/IG1hcDIgOiBtYXAxO1xuICAgIHZhciBhID0gMDtcbiAgICB2YXIgYiA9IDA7XG4gICAgdmFyIGMgPSAwO1xuICAgIHZhciBkID0gMDtcbiAgICBmcm9tLmZpbmQoZnVuY3Rpb24gKGFyciwgaW5kZXgpIHtcbiAgICAgICAgaWYgKGh1ZSA+PSBhcnJbMF0gJiYgaHVlIDwgYXJyWzFdKSB7XG4gICAgICAgICAgICBhID0gYXJyWzBdO1xuICAgICAgICAgICAgYiA9IGFyclsxXTtcbiAgICAgICAgICAgIGMgPSB0b1tpbmRleF1bMF07XG4gICAgICAgICAgICBkID0gdG9baW5kZXhdWzFdO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0pO1xuICAgIHJldHVybiBjICsgKGh1ZSAtIGEpICogKChkIC0gYykgLyAoYiAtIGEpKTtcbn07XG5leHBvcnRzLmh1ZVJZQiA9IGh1ZVJZQjtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///765\n')},845:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from) {\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\n        to[j] = from[i];\n    return to;\n};\nvar _a, _b, _c, _d, _e;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.colorMixer = exports.colorHarmony = exports.getColorMixture = exports.blend = exports.translateColor = exports.getRGBObject = exports.getRGBObjectFromObject = exports.getRGBObjectFromString = exports.getColorModel = exports.square = exports.tetradic = exports.triadic = exports.splitComplementary = exports.complementary = exports.analogous = exports.normalizeAlpha = exports.normalizeHue = void 0;\nvar _constants_1 = __webpack_require__(37);\nvar _helpers_1 = __webpack_require__(489);\nvar translators_1 = __webpack_require__(765);\nvar css_1 = __webpack_require__(992);\nvar pi2 = 360;\nvar normalizeHue = function (hue) {\n    if (hue > 360 || hue < 0) {\n        hue -= Math.floor(hue / pi2) * pi2;\n    }\n    return hue;\n};\nexports.normalizeHue = normalizeHue;\nvar normalizeAlpha = function (alpha) { return (isNaN(+alpha) || alpha > 1) ? 1 : _helpers_1.round(alpha, 2); };\nexports.normalizeAlpha = normalizeAlpha;\nvar harmony = function (color, angles, mode) {\n    return angles.reduce(function (arr, num) {\n        return (__spreadArray(__spreadArray([], arr), [\n            __assign(__assign({}, color), { h: mode === _constants_1.Mix.ADDITIVE\n                    ? exports.normalizeHue(color.h + num)\n                    : exports.normalizeHue(translators_1.hueRYB(translators_1.hueRYB(color.h, false) + num, true)) })\n        ]));\n    }, [__assign({}, color)]);\n};\nvar analogous = function (color, mode) { return harmony(color, [30, -30], mode); };\nexports.analogous = analogous;\nvar complementary = function (color, mode) { return harmony(color, [180], mode); };\nexports.complementary = complementary;\nvar splitComplementary = function (color, mode) { return harmony(color, [150, -150], mode); };\nexports.splitComplementary = splitComplementary;\nvar triadic = function (color, mode) { return harmony(color, [120, -120], mode); };\nexports.triadic = triadic;\nvar tetradic = function (color, mode) { return harmony(color, [60, -120, 180], mode); };\nexports.tetradic = tetradic;\nvar square = function (color, mode) { return harmony(color, [90, -90, 180], mode); };\nexports.square = square;\nvar getColorModelFromString = function (color) {\n    var model;\n    Object.keys(_constants_1.ColorModel).some(function (p) {\n        var reg = _constants_1.COLORREGS[p];\n        if (reg.test(color)) {\n            model = p;\n            return true;\n        }\n    });\n    if (!model) {\n        throw new Error(_constants_1.ERRORS.NOT_ACCEPTED_STRING_INPUT);\n    }\n    return model;\n};\nvar getColorModelFromObject = function (color) {\n    var model;\n    var different = false;\n    var props = _helpers_1.getOrderedArrayString(Object.keys(color));\n    var keys = Object.keys(_constants_1.ColorModel).filter(function (key) { return key !== _constants_1.ColorModel.HEX; });\n    keys.some(function (p) {\n        if (_helpers_1.getOrderedArrayString(p.split('')) === props) {\n            model = p;\n            return true;\n        }\n    });\n    if (model && model === _constants_1.ColorModel.RGB || model === _constants_1.ColorModel.RGBA) {\n        var isHEX_1 = Object.entries(color).map(function (item) {\n            return _constants_1.HEX.test(\"\" + item[1]);\n        });\n        var isRGB_1 = Object.entries(color).map(function (item) {\n            return _constants_1.PCENT.test(\"\" + item[1]) || (!_constants_1.HEX.test(\"\" + item[1]) && !isNaN(+item[1]) && +item[1] <= 255);\n        });\n        var differentHEX = isHEX_1.some(function (item, index) {\n            if (index > 0 && item !== isHEX_1[index - 1]) {\n                return true;\n            }\n            return false;\n        });\n        var differentRGB = isRGB_1.some(function (item, index) {\n            if (index > 0 && item !== isRGB_1[index - 1]) {\n                return true;\n            }\n            return false;\n        });\n        different = differentHEX || differentRGB || (!isHEX_1[0] && !isRGB_1[0]);\n        if (!different && isHEX_1[0]) {\n            model = _constants_1.ColorModel.HEX;\n        }\n    }\n    if (!model || different) {\n        throw new Error(_constants_1.ERRORS.NOT_ACCEPTED_OBJECT_INPUT);\n    }\n    return model;\n};\nvar getColorModel = function (color) { return typeof color === 'string'\n    ? getColorModelFromString(color)\n    : getColorModelFromObject(color); };\nexports.getColorModel = getColorModel;\nexports.getRGBObjectFromString = (_a = {},\n    _a[_constants_1.ColorModel.HEX] = function (color) {\n        var match = color.match(_constants_1.COLORREGS.HEX);\n        var object = {\n            r: _helpers_1.getDEC(match[1] || match[5]),\n            g: _helpers_1.getDEC(match[2] || match[6]),\n            b: _helpers_1.getDEC(match[3] || match[7])\n        };\n        var a = match[4] || match[8];\n        if (a !== undefined) {\n            object.a = _helpers_1.getDEC(a) / 255;\n        }\n        return object;\n    },\n    _a[_constants_1.ColorModel.RGB] = function (color) {\n        var match = color.match(_constants_1.COLORREGS.RGB);\n        var r = _helpers_1.getBase255Number(match[1] || match[4]);\n        var g = _helpers_1.getBase255Number(match[2] || match[5]);\n        var b = _helpers_1.getBase255Number(match[3] || match[6]);\n        var object = {\n            r: Math.min(r, 255),\n            g: Math.min(g, 255),\n            b: Math.min(b, 255)\n        };\n        return object;\n    },\n    _a[_constants_1.ColorModel.RGBA] = function (color) {\n        var match = color.match(_constants_1.COLORREGS.RGBA);\n        var r = _helpers_1.getBase255Number(match[1] || match[4]);\n        var g = _helpers_1.getBase255Number(match[2] || match[5]);\n        var b = _helpers_1.getBase255Number(match[3] || match[6]);\n        var a = +match[7];\n        var object = {\n            r: Math.min(r, 255),\n            g: Math.min(g, 255),\n            b: Math.min(b, 255),\n            a: exports.normalizeAlpha(a)\n        };\n        return object;\n    },\n    _a[_constants_1.ColorModel.HSL] = function (color) {\n        var match = color.match(_constants_1.COLORREGS.HSL);\n        var h = exports.normalizeHue(+match[1]);\n        var s = _helpers_1.percent(match[2]);\n        var l = _helpers_1.percent(match[3]);\n        return translators_1.hslToRGB(h, s, l);\n    },\n    _a[_constants_1.ColorModel.HSLA] = function (color) {\n        var match = color.match(_constants_1.COLORREGS.HSLA);\n        var h = exports.normalizeHue(+match[1]);\n        var s = _helpers_1.percent(match[2]);\n        var l = _helpers_1.percent(match[3]);\n        var a = +match[4];\n        var rgb = translators_1.hslToRGB(h, s, l);\n        rgb.a = exports.normalizeAlpha(a);\n        return rgb;\n    },\n    _a[_constants_1.ColorModel.CMYK] = function (color) {\n        var match = color.match(_constants_1.COLORREGS.CMYK);\n        var c = _helpers_1.getCMYKNumber(match[1] || match[5]);\n        var m = _helpers_1.getCMYKNumber(match[2] || match[6]);\n        var y = _helpers_1.getCMYKNumber(match[3] || match[7]);\n        var k = _helpers_1.getCMYKNumber(match[4] || match[8]);\n        return translators_1.cmykToRGB(c, m, y, k);\n    },\n    _a);\nexports.getRGBObjectFromObject = (_b = {},\n    _b[_constants_1.ColorModel.HEX] = function (color) {\n        var object = {\n            r: _helpers_1.getBase255Number(\"\" + color.r),\n            g: _helpers_1.getBase255Number(\"\" + color.g),\n            b: _helpers_1.getBase255Number(\"\" + color.b)\n        };\n        object.a = _helpers_1.hasProp(color, 'a')\n            ? Math.min(_helpers_1.getBase255Number(\"\" + color.a, true), 1)\n            : 1;\n        return object;\n    },\n    _b[_constants_1.ColorModel.RGB] = function (color) {\n        var rgbColor = this.HEX(color);\n        delete rgbColor.a;\n        return rgbColor;\n    },\n    _b[_constants_1.ColorModel.RGBA] = function (color) {\n        return this.HEX(color);\n    },\n    _b[_constants_1.ColorModel.HSL] = function (color) {\n        var s = _helpers_1.percent(\"\" + color.s);\n        var l = _helpers_1.percent(\"\" + color.l);\n        return translators_1.hslToRGB(exports.normalizeHue(color.h), s, l);\n    },\n    _b[_constants_1.ColorModel.HSLA] = function (color) {\n        var rgb = this.HSL(color);\n        rgb.a = exports.normalizeAlpha(color.a);\n        return rgb;\n    },\n    _b[_constants_1.ColorModel.CMYK] = function (color) {\n        var c = _helpers_1.getCMYKNumber(\"\" + color.c);\n        var m = _helpers_1.getCMYKNumber(\"\" + color.m);\n        var y = _helpers_1.getCMYKNumber(\"\" + color.y);\n        var k = _helpers_1.getCMYKNumber(\"\" + color.k);\n        return translators_1.cmykToRGB(c, m, y, k);\n    },\n    _b);\nvar getRGBObject = function (color, model) {\n    if (model === void 0) { model = exports.getColorModel(color); }\n    return typeof color === 'string'\n        ? exports.getRGBObjectFromString[model](color)\n        : exports.getRGBObjectFromObject[model](color);\n};\nexports.getRGBObject = getRGBObject;\nexports.translateColor = (_c = {},\n    _c[_constants_1.ColorModel.HEX] = function (color) {\n        return {\n            r: _helpers_1.getHEX(color.r),\n            g: _helpers_1.getHEX(color.g),\n            b: _helpers_1.getHEX(color.b),\n        };\n    },\n    _c.HEXA = function (color) {\n        var rgb = exports.translateColor.HEX(color);\n        rgb.a = _helpers_1.hasProp(color, 'a')\n            ? _helpers_1.getHEX(color.a * 255)\n            : '0xFF';\n        return rgb;\n    },\n    _c[_constants_1.ColorModel.RGB] = function (color) {\n        if (_helpers_1.hasProp(color, 'a')) {\n            delete color.a;\n        }\n        return color;\n    },\n    _c[_constants_1.ColorModel.RGBA] = function (color) {\n        color.a = _helpers_1.hasProp(color, 'a')\n            ? _helpers_1.round(color.a, 2)\n            : 1;\n        return color;\n    },\n    _c[_constants_1.ColorModel.HSL] = function (color) {\n        var hsl = translators_1.rgbToHSL(color.r, color.g, color.b);\n        delete hsl.a;\n        return hsl;\n    },\n    _c[_constants_1.ColorModel.HSLA] = function (color) {\n        var hsl = exports.translateColor.HSL(color);\n        hsl.a = _helpers_1.hasProp(color, 'a')\n            ? _helpers_1.round(color.a, 2)\n            : 1;\n        return hsl;\n    },\n    _c[_constants_1.ColorModel.CMYK] = function (color) {\n        return translators_1.rgbToCMYK(color.r, color.g, color.b);\n    },\n    _c);\nvar blend = function (from, to, steps) {\n    var div = steps - 1;\n    var diffR = (to.r - from.r) / div;\n    var diffG = (to.g - from.g) / div;\n    var diffB = (to.b - from.b) / div;\n    var fromA = exports.normalizeAlpha(from.a);\n    var toA = exports.normalizeAlpha(to.a);\n    var diffA = (toA - fromA) / div;\n    return Array(steps).fill(null).map(function (__n, i) {\n        if (i === 0) {\n            return from;\n        }\n        if (i === div) {\n            return to;\n        }\n        return {\n            r: _helpers_1.round(from.r + diffR * i),\n            g: _helpers_1.round(from.g + diffG * i),\n            b: _helpers_1.round(from.b + diffB * i),\n            a: _helpers_1.round(fromA + diffA * i, 2)\n        };\n    });\n};\nexports.blend = blend;\nvar getColorMixture = function (color, steps, shades) {\n    var model = exports.getColorModel(color);\n    var isCSS = typeof color === 'string';\n    var rgb = exports.getRGBObject(color, model);\n    var hasAlpha = ((typeof color === 'string' && _helpers_1.hasProp(rgb, 'a')) ||\n        (typeof color !== 'string' && _helpers_1.hasProp(color, 'a')));\n    var hsl = translators_1.rgbToHSL(rgb.r, rgb.g, rgb.b, rgb.a);\n    if (!hasAlpha)\n        delete hsl.a;\n    var increment = shades\n        ? hsl.l / (steps + 1)\n        : (100 - hsl.l) / (steps + 1);\n    var hslMap = Array(steps).fill(null).map(function (__n, i) { return (__assign(__assign({}, hsl), { l: hsl.l + increment * (i + 1) * (1 - +shades * 2) })); });\n    switch (model) {\n        case _constants_1.ColorModel.HEX:\n        default:\n            return hslMap.map(function (hslColor) {\n                var rgbColor = translators_1.hslToRGB(hslColor.h, hslColor.s, hslColor.l);\n                if (hasAlpha)\n                    rgbColor.a = hslColor.a;\n                return isCSS\n                    ? hasAlpha\n                        ? css_1.CSS.HEX(__assign(__assign({}, rgbColor), { a: _helpers_1.round(rgbColor.a * 255, 2) }))\n                        : css_1.CSS.HEX(rgbColor)\n                    : hasAlpha\n                        ? exports.translateColor.HEXA(rgbColor)\n                        : exports.translateColor.HEX(rgbColor);\n            });\n        case _constants_1.ColorModel.RGB:\n        case _constants_1.ColorModel.RGBA:\n            return hslMap.map(function (hslColor) {\n                var rgbColor = translators_1.hslToRGB(hslColor.h, hslColor.s, hslColor.l);\n                if (hasAlpha)\n                    rgbColor.a = hslColor.a;\n                return isCSS\n                    ? css_1.CSS.RGB(rgbColor)\n                    : hasAlpha\n                        ? exports.translateColor.RGBA(rgbColor)\n                        : exports.translateColor.RGB(rgbColor);\n            });\n        case _constants_1.ColorModel.HSL:\n        case _constants_1.ColorModel.HSLA:\n            return hslMap.map(function (hslColor) {\n                return isCSS\n                    ? css_1.CSS.HSL(hslColor)\n                    : hasAlpha\n                        ? exports.translateColor.HSLA(__assign(__assign({}, translators_1.hslToRGB(hslColor.h, hslColor.s, hslColor.l)), { a: hslColor.a }))\n                        : exports.translateColor.HSL(translators_1.hslToRGB(hslColor.h, hslColor.s, hslColor.l));\n            });\n    }\n};\nexports.getColorMixture = getColorMixture;\nexports.colorHarmony = (_d = {\n        buildHarmony: function (color, harmonyFunction, mode) {\n            var model = exports.getColorModel(color);\n            var rgb = exports.getRGBObject(color, model);\n            var hsl = translators_1.rgbToHSL(rgb.r, rgb.g, rgb.b, rgb.a);\n            var hasAlpha = ((typeof color === 'string' && _helpers_1.hasProp(rgb, 'a')) ||\n                (typeof color !== 'string' && _helpers_1.hasProp(color, 'a')));\n            var isCSS = typeof color === 'string';\n            switch (model) {\n                case _constants_1.ColorModel.HEX:\n                default:\n                    return hasAlpha\n                        ? this.HEXA(hsl, harmonyFunction, mode, isCSS)\n                        : this.HEX(hsl, harmonyFunction, mode, isCSS);\n                case _constants_1.ColorModel.HSL:\n                    return this.HSL(hsl, harmonyFunction, mode, isCSS);\n                case _constants_1.ColorModel.HSLA:\n                    return this.HSLA(hsl, harmonyFunction, mode, isCSS);\n                case _constants_1.ColorModel.RGB:\n                    return this.RGB(hsl, harmonyFunction, mode, isCSS);\n                case _constants_1.ColorModel.RGBA:\n                    return this.RGBA(hsl, harmonyFunction, mode, isCSS);\n            }\n        }\n    },\n    _d[_constants_1.ColorModel.HEX] = function (color, harmonyFunction, mode, css) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? css_1.CSS.HEX(translators_1.hslToRGB(c.h, c.s, c.l))\n            : exports.translateColor.HEX(translators_1.hslToRGB(c.h, c.s, c.l))); });\n    },\n    _d.HEXA = function (color, harmonyFunction, mode, css) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? css_1.CSS.HEX(__assign(__assign({}, translators_1.hslToRGB(c.h, c.s, c.l)), { a: exports.normalizeAlpha(c.a) * 255 }))\n            : exports.translateColor.HEXA(__assign(__assign({}, translators_1.hslToRGB(c.h, c.s, c.l)), { a: exports.normalizeAlpha(c.a) }))); });\n    },\n    _d[_constants_1.ColorModel.RGB] = function (color, harmonyFunction, mode, css) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? css_1.CSS.RGB(translators_1.hslToRGB(c.h, c.s, c.l))\n            : exports.translateColor.RGB(translators_1.hslToRGB(c.h, c.s, c.l))); });\n    },\n    _d[_constants_1.ColorModel.RGBA] = function (color, harmonyFunction, mode, css) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? css_1.CSS.RGB(__assign(__assign({}, translators_1.hslToRGB(c.h, c.s, c.l)), { a: exports.normalizeAlpha(c.a) }))\n            : exports.translateColor.RGBA(__assign(__assign({}, translators_1.hslToRGB(c.h, c.s, c.l)), { a: exports.normalizeAlpha(c.a) }))); });\n    },\n    _d[_constants_1.ColorModel.HSL] = function (color, harmonyFunction, mode, css) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? css_1.CSS.HSL({ h: c.h, s: c.s, l: c.l })\n            : exports.translateColor.HSL(translators_1.hslToRGB(c.h, c.s, c.l))); });\n    },\n    _d[_constants_1.ColorModel.HSLA] = function (color, harmonyFunction, mode, css) {\n        var array = harmonyFunction(color, mode);\n        return array.map(function (c) { return (css\n            ? css_1.CSS.HSL(__assign(__assign({}, c), { a: exports.normalizeAlpha(c.a) }))\n            : exports.translateColor.HSLA(__assign(__assign({}, translators_1.hslToRGB(c.h, c.s, c.l)), { a: exports.normalizeAlpha(c.a) }))); });\n    },\n    _d);\nexports.colorMixer = (_e = {\n        mix: function (colors, mode) {\n            var rgbMap = colors.map(function (color) {\n                var model = exports.getColorModel(color);\n                return exports.getRGBObject(color, model);\n            });\n            var rybMap = mode === _constants_1.Mix.SUBTRACTIVE\n                ? rgbMap.map(function (color) {\n                    var ryb = translators_1.rgbToRYB(color.r, color.g, color.b);\n                    if (_helpers_1.hasProp(color, 'a')) {\n                        ryb.a = color.a;\n                    }\n                    return ryb;\n                })\n                : null;\n            function createMix(items) {\n                var initial = mode === _constants_1.Mix.ADDITIVE\n                    ? { r: 0, g: 0, b: 0, a: 0 }\n                    : { r: 0, y: 0, b: 0, a: 0 };\n                return items.reduce(function (mix, color) {\n                    var colorA = _helpers_1.hasProp(color, 'a') ? color.a : 1;\n                    var common = {\n                        r: Math.min(mix.r + color.r * colorA, 255),\n                        b: Math.min(mix.b + color.b * colorA, 255),\n                        a: 1 - (1 - colorA) * (1 - mix.a)\n                    };\n                    var mixGY = 'g' in mix\n                        ? mix.g\n                        : mix.y;\n                    var colorGY = 'g' in color\n                        ? color.g\n                        : color.y;\n                    return __assign(__assign({}, common), (mode === _constants_1.Mix.ADDITIVE\n                        ? { g: Math.min(mixGY + colorGY * colorA, 255) }\n                        : { y: Math.min(mixGY + colorGY * colorA, 255) }));\n                }, initial);\n            }\n            var mix;\n            if (mode === _constants_1.Mix.ADDITIVE) {\n                mix = createMix(rgbMap);\n            }\n            else {\n                var ryb = createMix(rybMap);\n                mix = translators_1.rybToRGB(ryb.r, ryb.y, ryb.b);\n                mix.a = ryb.a;\n            }\n            return {\n                r: _helpers_1.round(mix.r, 2),\n                g: _helpers_1.round(mix.g, 2),\n                b: _helpers_1.round(mix.b, 2),\n                a: _helpers_1.minmax(mix.a, 0, 1)\n            };\n        }\n    },\n    _e[_constants_1.ColorModel.HEX] = function (colors, mode, css) {\n        var mix = this.mix(colors, mode);\n        delete mix.a;\n        return css\n            ? css_1.CSS.HEX(mix)\n            : exports.translateColor.HEX(mix);\n    },\n    _e.HEXA = function (colors, mode, css) {\n        var mix = this.mix(colors, mode);\n        mix.a = css\n            ? exports.normalizeAlpha(mix.a) * 255\n            : exports.normalizeAlpha(mix.a);\n        return css\n            ? css_1.CSS.HEX(mix)\n            : exports.translateColor.HEXA(mix);\n    },\n    _e[_constants_1.ColorModel.RGB] = function (colors, mode, css) {\n        var mix = this.mix(colors, mode);\n        delete mix.a;\n        return css\n            ? css_1.CSS.RGB(mix)\n            : exports.translateColor.RGB(mix);\n    },\n    _e[_constants_1.ColorModel.RGBA] = function (colors, mode, css) {\n        var mix = this.mix(colors, mode);\n        return css\n            ? css_1.CSS.RGB(mix)\n            : exports.translateColor.RGBA(mix);\n    },\n    _e[_constants_1.ColorModel.HSL] = function (colors, mode, css) {\n        var mix = this.mix(colors, mode);\n        var hsl = translators_1.rgbToHSL(mix.r, mix.g, mix.b);\n        delete mix.a;\n        delete hsl.a;\n        return css\n            ? css_1.CSS.HSL(hsl)\n            : exports.translateColor.HSL(mix);\n    },\n    _e[_constants_1.ColorModel.HSLA] = function (colors, mode, css) {\n        var mix = this.mix(colors, mode);\n        var hsl = translators_1.rgbToHSL(mix.r, mix.g, mix.b, mix.a);\n        return css\n            ? css_1.CSS.HSL(hsl)\n            : exports.translateColor.HSLA(mix);\n    },\n    _e);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///845\n")},37:(__unused_webpack_module,exports)=>{"use strict";eval('\nvar _a;\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.ERRORS = exports.HEX = exports.PCENT = exports.COLORREGS = exports.Mix = exports.Harmony = exports.ColorModel = void 0;\nvar ColorModel;\n(function (ColorModel) {\n    ColorModel["HEX"] = "HEX";\n    ColorModel["RGB"] = "RGB";\n    ColorModel["RGBA"] = "RGBA";\n    ColorModel["HSL"] = "HSL";\n    ColorModel["HSLA"] = "HSLA";\n    ColorModel["CMYK"] = "CMYK";\n})(ColorModel = exports.ColorModel || (exports.ColorModel = {}));\nvar Harmony;\n(function (Harmony) {\n    Harmony["ANALOGOUS"] = "ANALOGOUS";\n    Harmony["COMPLEMENTARY"] = "COMPLEMENTARY";\n    Harmony["SPLIT_COMPLEMENTARY"] = "SPLIT_COMPLEMENTARY";\n    Harmony["TRIADIC"] = "TRIADIC";\n    Harmony["TETRADIC"] = "TETRADIC";\n    Harmony["SQUARE"] = "SQUARE";\n})(Harmony = exports.Harmony || (exports.Harmony = {}));\nvar Mix;\n(function (Mix) {\n    Mix["ADDITIVE"] = "ADDITIVE";\n    Mix["SUBTRACTIVE"] = "SUBTRACTIVE";\n})(Mix = exports.Mix || (exports.Mix = {}));\nexports.COLORREGS = (_a = {},\n    _a[ColorModel.HEX] = /^#(?:([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?|([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?)$/i,\n    _a[ColorModel.RGB] = /^rgb\\s*\\(\\s*(?:(\\d+%)\\s*,\\s*(\\d+%)\\s*,\\s*(\\d+%)|(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+))\\s*\\)$/,\n    _a[ColorModel.RGBA] = /^rgba\\s*\\(\\s*(?:(\\d+%)\\s*,\\s*(\\d+%)\\s*,\\s*(\\d+%)|(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+))\\s*,\\s*(\\d\\.?\\d*)\\s*\\)$/,\n    _a[ColorModel.HSL] = /^hsl\\s*\\(\\s*(-?\\d+\\.?\\d*)\\s*,\\s*(\\d+\\.?\\d*)%\\s*,\\s*(\\d+\\.?\\d*)%s*\\)$/,\n    _a[ColorModel.HSLA] = /^hsla\\s*\\(\\s*(-?\\d+\\.?\\d*)\\s*,\\s*(\\d+\\.?\\d*)%\\s*,\\s*(\\d+\\.?\\d*)%\\s*,\\s*(\\d\\.?\\d*)\\s*\\)$/,\n    _a[ColorModel.CMYK] = /^(?:device-cmyk|cmyk)\\s*\\(\\s*(?:(\\d+\\.?\\d*%)\\s*,\\s*(\\d+\\.?\\d*%)\\s*,\\s*(\\d+\\.?\\d*%)\\s*,\\s*(\\d+\\.?\\d*%)|(\\d\\.?\\d*)\\s*,\\s*(\\d\\.?\\d*)\\s*,\\s*(\\d\\.?\\d*)\\s*,\\s*(\\d\\.?\\d*))\\s*\\)$/,\n    _a);\nexports.PCENT = /^(\\d+(?:\\.\\d+)?|\\.\\d+)%$/;\nexports.HEX = /^0x([a-f\\d]{1,2})$/i;\nexports.ERRORS = {\n    NOT_ACCEPTED_STRING_INPUT: \'The provided string color doesn\\\'t have a correct format\',\n    NOT_ACCEPTED_OBJECT_INPUT: \'The provided color object doesn\\\'t have the proper keys or format\'\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvY29uc3RhbnRzL2luZGV4LnRzPzcwMmEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDhDQUE2QyxDQUFDLGNBQWMsRUFBQztBQUM3RCxjQUFjLEdBQUcsV0FBVyxHQUFHLGFBQWEsR0FBRyxpQkFBaUIsR0FBRyxXQUFXLEdBQUcsZUFBZSxHQUFHLGtCQUFrQjtBQUNySDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0Msa0JBQWtCLEtBQUs7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsZ0NBQWdDLGVBQWUsS0FBSztBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0JBQXdCLFdBQVcsS0FBSztBQUN6QyxpQkFBaUIsV0FBVztBQUM1Qiw4RUFBOEUsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRTtBQUNwSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2IsV0FBVyxnQkFBZ0IsSUFBSTtBQUMvQixjQUFjO0FBQ2Q7QUFDQTtBQUNBIiwiZmlsZSI6IjM3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX2E7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkVSUk9SUyA9IGV4cG9ydHMuSEVYID0gZXhwb3J0cy5QQ0VOVCA9IGV4cG9ydHMuQ09MT1JSRUdTID0gZXhwb3J0cy5NaXggPSBleHBvcnRzLkhhcm1vbnkgPSBleHBvcnRzLkNvbG9yTW9kZWwgPSB2b2lkIDA7XG52YXIgQ29sb3JNb2RlbDtcbihmdW5jdGlvbiAoQ29sb3JNb2RlbCkge1xuICAgIENvbG9yTW9kZWxbXCJIRVhcIl0gPSBcIkhFWFwiO1xuICAgIENvbG9yTW9kZWxbXCJSR0JcIl0gPSBcIlJHQlwiO1xuICAgIENvbG9yTW9kZWxbXCJSR0JBXCJdID0gXCJSR0JBXCI7XG4gICAgQ29sb3JNb2RlbFtcIkhTTFwiXSA9IFwiSFNMXCI7XG4gICAgQ29sb3JNb2RlbFtcIkhTTEFcIl0gPSBcIkhTTEFcIjtcbiAgICBDb2xvck1vZGVsW1wiQ01ZS1wiXSA9IFwiQ01ZS1wiO1xufSkoQ29sb3JNb2RlbCA9IGV4cG9ydHMuQ29sb3JNb2RlbCB8fCAoZXhwb3J0cy5Db2xvck1vZGVsID0ge30pKTtcbnZhciBIYXJtb255O1xuKGZ1bmN0aW9uIChIYXJtb255KSB7XG4gICAgSGFybW9ueVtcIkFOQUxPR09VU1wiXSA9IFwiQU5BTE9HT1VTXCI7XG4gICAgSGFybW9ueVtcIkNPTVBMRU1FTlRBUllcIl0gPSBcIkNPTVBMRU1FTlRBUllcIjtcbiAgICBIYXJtb255W1wiU1BMSVRfQ09NUExFTUVOVEFSWVwiXSA9IFwiU1BMSVRfQ09NUExFTUVOVEFSWVwiO1xuICAgIEhhcm1vbnlbXCJUUklBRElDXCJdID0gXCJUUklBRElDXCI7XG4gICAgSGFybW9ueVtcIlRFVFJBRElDXCJdID0gXCJURVRSQURJQ1wiO1xuICAgIEhhcm1vbnlbXCJTUVVBUkVcIl0gPSBcIlNRVUFSRVwiO1xufSkoSGFybW9ueSA9IGV4cG9ydHMuSGFybW9ueSB8fCAoZXhwb3J0cy5IYXJtb255ID0ge30pKTtcbnZhciBNaXg7XG4oZnVuY3Rpb24gKE1peCkge1xuICAgIE1peFtcIkFERElUSVZFXCJdID0gXCJBRERJVElWRVwiO1xuICAgIE1peFtcIlNVQlRSQUNUSVZFXCJdID0gXCJTVUJUUkFDVElWRVwiO1xufSkoTWl4ID0gZXhwb3J0cy5NaXggfHwgKGV4cG9ydHMuTWl4ID0ge30pKTtcbmV4cG9ydHMuQ09MT1JSRUdTID0gKF9hID0ge30sXG4gICAgX2FbQ29sb3JNb2RlbC5IRVhdID0gL14jKD86KFthLWZcXGRdKShbYS1mXFxkXSkoW2EtZlxcZF0pKFthLWZcXGRdKT98KFthLWZcXGRdezJ9KShbYS1mXFxkXXsyfSkoW2EtZlxcZF17Mn0pKFthLWZcXGRdezJ9KT8pJC9pLFxuICAgIF9hW0NvbG9yTW9kZWwuUkdCXSA9IC9ecmdiXFxzKlxcKFxccyooPzooXFxkKyUpXFxzKixcXHMqKFxcZCslKVxccyosXFxzKihcXGQrJSl8KFxcZCspXFxzKixcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspKVxccypcXCkkLyxcbiAgICBfYVtDb2xvck1vZGVsLlJHQkFdID0gL15yZ2JhXFxzKlxcKFxccyooPzooXFxkKyUpXFxzKixcXHMqKFxcZCslKVxccyosXFxzKihcXGQrJSl8KFxcZCspXFxzKixcXHMqKFxcZCspXFxzKixcXHMqKFxcZCspKVxccyosXFxzKihcXGRcXC4/XFxkKilcXHMqXFwpJC8sXG4gICAgX2FbQ29sb3JNb2RlbC5IU0xdID0gL15oc2xcXHMqXFwoXFxzKigtP1xcZCtcXC4/XFxkKilcXHMqLFxccyooXFxkK1xcLj9cXGQqKSVcXHMqLFxccyooXFxkK1xcLj9cXGQqKSVzKlxcKSQvLFxuICAgIF9hW0NvbG9yTW9kZWwuSFNMQV0gPSAvXmhzbGFcXHMqXFwoXFxzKigtP1xcZCtcXC4/XFxkKilcXHMqLFxccyooXFxkK1xcLj9cXGQqKSVcXHMqLFxccyooXFxkK1xcLj9cXGQqKSVcXHMqLFxccyooXFxkXFwuP1xcZCopXFxzKlxcKSQvLFxuICAgIF9hW0NvbG9yTW9kZWwuQ01ZS10gPSAvXig/OmRldmljZS1jbXlrfGNteWspXFxzKlxcKFxccyooPzooXFxkK1xcLj9cXGQqJSlcXHMqLFxccyooXFxkK1xcLj9cXGQqJSlcXHMqLFxccyooXFxkK1xcLj9cXGQqJSlcXHMqLFxccyooXFxkK1xcLj9cXGQqJSl8KFxcZFxcLj9cXGQqKVxccyosXFxzKihcXGRcXC4/XFxkKilcXHMqLFxccyooXFxkXFwuP1xcZCopXFxzKixcXHMqKFxcZFxcLj9cXGQqKSlcXHMqXFwpJC8sXG4gICAgX2EpO1xuZXhwb3J0cy5QQ0VOVCA9IC9eKFxcZCsoPzpcXC5cXGQrKT98XFwuXFxkKyklJC87XG5leHBvcnRzLkhFWCA9IC9eMHgoW2EtZlxcZF17MSwyfSkkL2k7XG5leHBvcnRzLkVSUk9SUyA9IHtcbiAgICBOT1RfQUNDRVBURURfU1RSSU5HX0lOUFVUOiAnVGhlIHByb3ZpZGVkIHN0cmluZyBjb2xvciBkb2VzblxcJ3QgaGF2ZSBhIGNvcnJlY3QgZm9ybWF0JyxcbiAgICBOT1RfQUNDRVBURURfT0JKRUNUX0lOUFVUOiAnVGhlIHByb3ZpZGVkIGNvbG9yIG9iamVjdCBkb2VzblxcJ3QgaGF2ZSB0aGUgcHJvcGVyIGtleXMgb3IgZm9ybWF0J1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///37\n')},489:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.minmax = exports.round = exports.getOrderedArrayString = exports.getCMYKNumber = exports.getBase255Number = exports.toHEX = exports.getHEX = exports.getDEC = exports.percent = exports.hasProp = void 0;\nvar _constants_1 = __webpack_require__(37);\nvar hasProp = function (obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); };\nexports.hasProp = hasProp;\nvar percent = function (percent) { return _constants_1.PCENT.test("" + percent)\n    ? +(("" + percent).replace(_constants_1.PCENT, \'$1\'))\n    : Math.min(+percent, 100); };\nexports.percent = percent;\nvar getDEC = function (hex) {\n    if (hex.length === 1) {\n        hex += hex;\n    }\n    return parseInt(hex, 16);\n};\nexports.getDEC = getDEC;\nvar getHEX = function (number) {\n    var hex = parseInt("" + number).toString(16).toUpperCase();\n    if (hex.length === 1) {\n        return "0x0" + hex;\n    }\n    return "0x" + hex;\n};\nexports.getHEX = getHEX;\nvar toHEX = function (h) {\n    var hex = parseInt("" + h).toString(16).toUpperCase();\n    if (hex.length === 1) {\n        hex = "0" + hex;\n    }\n    return hex;\n};\nexports.toHEX = toHEX;\nvar getBase255Number = function (color, alpha) {\n    if (alpha === void 0) { alpha = false; }\n    if (!alpha && _constants_1.PCENT.test(color)) {\n        return Math.min(255 * +(color.replace(_constants_1.PCENT, \'$1\')) / 100, 255);\n    }\n    if (_constants_1.HEX.test(color)) {\n        if (color.length === 3) {\n            return alpha\n                ? parseInt(color + color.slice(-1)) / 255\n                : parseInt(color + color.slice(-1));\n        }\n        return alpha\n            ? parseInt(color) / 255\n            : parseInt(color);\n    }\n    return Math.min(+color, alpha ? 1 : 255);\n};\nexports.getBase255Number = getBase255Number;\nvar getCMYKNumber = function (color) { return Math.min(_constants_1.PCENT.test(color) ? +(color.replace(_constants_1.PCENT, \'$1\')) / 100 : +color, 1); };\nexports.getCMYKNumber = getCMYKNumber;\nvar getOrderedArrayString = function (keys) { return keys.sort().join().toUpperCase(); };\nexports.getOrderedArrayString = getOrderedArrayString;\nvar round = function (value, decimals) {\n    if (decimals === void 0) { decimals = 0; }\n    var exp = Math.pow(10, decimals);\n    return Math.round(+value * exp) / exp;\n};\nexports.round = round;\nvar minmax = function (n, min, max) { return Math.max(min, Math.min(n, max)); };\nexports.minmax = minmax;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9jb2xvcnRyYW5zbGF0b3IvLi9zcmMvaGVscGVycy9pbmRleC50cz83OGExIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLENBQUMsY0FBYyxFQUFDO0FBQzdELGNBQWMsR0FBRyxhQUFhLEdBQUcsNkJBQTZCLEdBQUcscUJBQXFCLEdBQUcsd0JBQXdCLEdBQUcsYUFBYSxHQUFHLGNBQWMsR0FBRyxjQUFjLEdBQUcsZUFBZSxHQUFHLGVBQWU7QUFDdk0sbUJBQW1CLG1CQUFPLENBQUMsRUFBWTtBQUN2QyxvQ0FBb0Msd0RBQXdEO0FBQzVGLGVBQWU7QUFDZixrQ0FBa0M7QUFDbEM7QUFDQSw4QkFBOEI7QUFDOUIsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLDJCQUEyQixlQUFlO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QixzQ0FBc0MsZ0hBQWdIO0FBQ3RKLHFCQUFxQjtBQUNyQiw2Q0FBNkMseUNBQXlDO0FBQ3RGLDZCQUE2QjtBQUM3QjtBQUNBLDhCQUE4QixjQUFjO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixxQ0FBcUMsd0NBQXdDO0FBQzdFLGNBQWMiLCJmaWxlIjoiNDg5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1pbm1heCA9IGV4cG9ydHMucm91bmQgPSBleHBvcnRzLmdldE9yZGVyZWRBcnJheVN0cmluZyA9IGV4cG9ydHMuZ2V0Q01ZS051bWJlciA9IGV4cG9ydHMuZ2V0QmFzZTI1NU51bWJlciA9IGV4cG9ydHMudG9IRVggPSBleHBvcnRzLmdldEhFWCA9IGV4cG9ydHMuZ2V0REVDID0gZXhwb3J0cy5wZXJjZW50ID0gZXhwb3J0cy5oYXNQcm9wID0gdm9pZCAwO1xudmFyIF9jb25zdGFudHNfMSA9IHJlcXVpcmUoXCIjY29uc3RhbnRzXCIpO1xudmFyIGhhc1Byb3AgPSBmdW5jdGlvbiAob2JqLCBwcm9wKSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTsgfTtcbmV4cG9ydHMuaGFzUHJvcCA9IGhhc1Byb3A7XG52YXIgcGVyY2VudCA9IGZ1bmN0aW9uIChwZXJjZW50KSB7IHJldHVybiBfY29uc3RhbnRzXzEuUENFTlQudGVzdChcIlwiICsgcGVyY2VudClcbiAgICA/ICsoKFwiXCIgKyBwZXJjZW50KS5yZXBsYWNlKF9jb25zdGFudHNfMS5QQ0VOVCwgJyQxJykpXG4gICAgOiBNYXRoLm1pbigrcGVyY2VudCwgMTAwKTsgfTtcbmV4cG9ydHMucGVyY2VudCA9IHBlcmNlbnQ7XG52YXIgZ2V0REVDID0gZnVuY3Rpb24gKGhleCkge1xuICAgIGlmIChoZXgubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGhleCArPSBoZXg7XG4gICAgfVxuICAgIHJldHVybiBwYXJzZUludChoZXgsIDE2KTtcbn07XG5leHBvcnRzLmdldERFQyA9IGdldERFQztcbnZhciBnZXRIRVggPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gICAgdmFyIGhleCA9IHBhcnNlSW50KFwiXCIgKyBudW1iZXIpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChoZXgubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBcIjB4MFwiICsgaGV4O1xuICAgIH1cbiAgICByZXR1cm4gXCIweFwiICsgaGV4O1xufTtcbmV4cG9ydHMuZ2V0SEVYID0gZ2V0SEVYO1xudmFyIHRvSEVYID0gZnVuY3Rpb24gKGgpIHtcbiAgICB2YXIgaGV4ID0gcGFyc2VJbnQoXCJcIiArIGgpLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChoZXgubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGhleCA9IFwiMFwiICsgaGV4O1xuICAgIH1cbiAgICByZXR1cm4gaGV4O1xufTtcbmV4cG9ydHMudG9IRVggPSB0b0hFWDtcbnZhciBnZXRCYXNlMjU1TnVtYmVyID0gZnVuY3Rpb24gKGNvbG9yLCBhbHBoYSkge1xuICAgIGlmIChhbHBoYSA9PT0gdm9pZCAwKSB7IGFscGhhID0gZmFsc2U7IH1cbiAgICBpZiAoIWFscGhhICYmIF9jb25zdGFudHNfMS5QQ0VOVC50ZXN0KGNvbG9yKSkge1xuICAgICAgICByZXR1cm4gTWF0aC5taW4oMjU1ICogKyhjb2xvci5yZXBsYWNlKF9jb25zdGFudHNfMS5QQ0VOVCwgJyQxJykpIC8gMTAwLCAyNTUpO1xuICAgIH1cbiAgICBpZiAoX2NvbnN0YW50c18xLkhFWC50ZXN0KGNvbG9yKSkge1xuICAgICAgICBpZiAoY29sb3IubGVuZ3RoID09PSAzKSB7XG4gICAgICAgICAgICByZXR1cm4gYWxwaGFcbiAgICAgICAgICAgICAgICA/IHBhcnNlSW50KGNvbG9yICsgY29sb3Iuc2xpY2UoLTEpKSAvIDI1NVxuICAgICAgICAgICAgICAgIDogcGFyc2VJbnQoY29sb3IgKyBjb2xvci5zbGljZSgtMSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbHBoYVxuICAgICAgICAgICAgPyBwYXJzZUludChjb2xvcikgLyAyNTVcbiAgICAgICAgICAgIDogcGFyc2VJbnQoY29sb3IpO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5taW4oK2NvbG9yLCBhbHBoYSA/IDEgOiAyNTUpO1xufTtcbmV4cG9ydHMuZ2V0QmFzZTI1NU51bWJlciA9IGdldEJhc2UyNTVOdW1iZXI7XG52YXIgZ2V0Q01ZS051bWJlciA9IGZ1bmN0aW9uIChjb2xvcikgeyByZXR1cm4gTWF0aC5taW4oX2NvbnN0YW50c18xLlBDRU5ULnRlc3QoY29sb3IpID8gKyhjb2xvci5yZXBsYWNlKF9jb25zdGFudHNfMS5QQ0VOVCwgJyQxJykpIC8gMTAwIDogK2NvbG9yLCAxKTsgfTtcbmV4cG9ydHMuZ2V0Q01ZS051bWJlciA9IGdldENNWUtOdW1iZXI7XG52YXIgZ2V0T3JkZXJlZEFycmF5U3RyaW5nID0gZnVuY3Rpb24gKGtleXMpIHsgcmV0dXJuIGtleXMuc29ydCgpLmpvaW4oKS50b1VwcGVyQ2FzZSgpOyB9O1xuZXhwb3J0cy5nZXRPcmRlcmVkQXJyYXlTdHJpbmcgPSBnZXRPcmRlcmVkQXJyYXlTdHJpbmc7XG52YXIgcm91bmQgPSBmdW5jdGlvbiAodmFsdWUsIGRlY2ltYWxzKSB7XG4gICAgaWYgKGRlY2ltYWxzID09PSB2b2lkIDApIHsgZGVjaW1hbHMgPSAwOyB9XG4gICAgdmFyIGV4cCA9IE1hdGgucG93KDEwLCBkZWNpbWFscyk7XG4gICAgcmV0dXJuIE1hdGgucm91bmQoK3ZhbHVlICogZXhwKSAvIGV4cDtcbn07XG5leHBvcnRzLnJvdW5kID0gcm91bmQ7XG52YXIgbWlubWF4ID0gZnVuY3Rpb24gKG4sIG1pbiwgbWF4KSB7IHJldHVybiBNYXRoLm1heChtaW4sIE1hdGgubWluKG4sIG1heCkpOyB9O1xuZXhwb3J0cy5taW5tYXggPSBtaW5tYXg7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///489\n')},607:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Mix = exports.Harmony = exports.ColorTranslator = void 0;\nvar _constants_1 = __webpack_require__(37);\nObject.defineProperty(exports, "Harmony", ({ enumerable: true, get: function () { return _constants_1.Harmony; } }));\nObject.defineProperty(exports, "Mix", ({ enumerable: true, get: function () { return _constants_1.Mix; } }));\nvar translators_1 = __webpack_require__(765);\nvar utils = __webpack_require__(845);\nvar css_1 = __webpack_require__(992);\nvar _helpers_1 = __webpack_require__(489);\nvar check = function (color, css) { return (typeof color === \'string\' && css || typeof color === \'object\' && !css); };\nvar getReturn = function (color, model, css, translateFunction, cssFunction) {\n    var rgbObject = utils.getRGBObject(color, model);\n    var translated = translateFunction(rgbObject);\n    if (!css) {\n        return translated;\n    }\n    return cssFunction(translated);\n};\nvar defaultBlendSteps = 5;\nvar getBlendReturn = function (from, to, steps, css, translateFunction, cssFunction) {\n    if (steps < 1)\n        steps = defaultBlendSteps;\n    var fromRGBObject = utils.getRGBObject(from);\n    var toRGBObject = utils.getRGBObject(to);\n    var blendArray = utils.blend(fromRGBObject, toRGBObject, steps);\n    return blendArray.map(function (color) {\n        var translated = translateFunction(color);\n        if (!css) {\n            return translated;\n        }\n        return cssFunction(translated);\n    });\n};\nvar ColorTranslator = (function () {\n    function ColorTranslator(color) {\n        this.rgb = utils.getRGBObject(color);\n        this.updateHSL();\n        this.updateCMYK();\n    }\n    ColorTranslator.prototype.updateRGB = function () {\n        this.rgb = __assign(__assign({}, translators_1.hslToRGB(this.hsl.h, this.hsl.s, this.hsl.l)), { a: this.hsl.a });\n    };\n    ColorTranslator.prototype.updateRGBFromCMYK = function () {\n        this.rgb = __assign(__assign({}, translators_1.cmykToRGB(this.cmyk.c, this.cmyk.m, this.cmyk.y, this.cmyk.k)), { a: this.rgb.a });\n    };\n    ColorTranslator.prototype.updateHSL = function () {\n        this.hsl = translators_1.rgbToHSL(this.rgb.r, this.rgb.g, this.rgb.b, this.rgb.a);\n    };\n    ColorTranslator.prototype.updateCMYK = function () {\n        this.cmyk = translators_1.rgbToCMYK(this.rgb.r, this.rgb.g, this.rgb.b);\n    };\n    ColorTranslator.prototype.updateRGBAndCMYK = function () {\n        this.updateRGB();\n        this.updateCMYK();\n        return this;\n    };\n    ColorTranslator.prototype.updateHSLAndCMYK = function () {\n        this.updateHSL();\n        this.updateCMYK();\n        return this;\n    };\n    ColorTranslator.prototype.updateRGBAndHSL = function () {\n        this.updateRGBFromCMYK();\n        this.updateHSL();\n        return this;\n    };\n    ColorTranslator.prototype.setH = function (h) {\n        this.hsl.h = utils.normalizeHue(h);\n        return this.updateRGBAndCMYK();\n    };\n    ColorTranslator.prototype.setS = function (s) {\n        this.hsl.s = _helpers_1.minmax(s, 0, 100);\n        return this.updateRGBAndCMYK();\n    };\n    ColorTranslator.prototype.setL = function (l) {\n        this.hsl.l = _helpers_1.minmax(l, 0, 100);\n        return this.updateRGBAndCMYK();\n    };\n    ColorTranslator.prototype.setR = function (r) {\n        this.rgb.r = _helpers_1.minmax(r, 0, 255);\n        return this.updateHSLAndCMYK();\n    };\n    ColorTranslator.prototype.setG = function (g) {\n        this.rgb.g = _helpers_1.minmax(g, 0, 255);\n        return this.updateHSLAndCMYK();\n    };\n    ColorTranslator.prototype.setB = function (b) {\n        this.rgb.b = _helpers_1.minmax(b, 0, 255);\n        return this.updateHSLAndCMYK();\n    };\n    ColorTranslator.prototype.setA = function (a) {\n        this.hsl.a = this.rgb.a = _helpers_1.minmax(a, 0, 1);\n        return this;\n    };\n    ColorTranslator.prototype.setC = function (c) {\n        this.cmyk.c = _helpers_1.minmax(c, 0, 100);\n        return this.updateRGBAndHSL();\n    };\n    ColorTranslator.prototype.setM = function (m) {\n        this.cmyk.m = _helpers_1.minmax(m, 0, 100);\n        return this.updateRGBAndHSL();\n    };\n    ColorTranslator.prototype.setY = function (y) {\n        this.cmyk.y = _helpers_1.minmax(y, 0, 100);\n        return this.updateRGBAndHSL();\n    };\n    ColorTranslator.prototype.setK = function (k) {\n        this.cmyk.k = _helpers_1.minmax(k, 0, 100);\n        return this.updateRGBAndHSL();\n    };\n    Object.defineProperty(ColorTranslator.prototype, "H", {\n        get: function () {\n            return _helpers_1.round(this.hsl.h);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "S", {\n        get: function () {\n            return _helpers_1.round(this.hsl.s);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "L", {\n        get: function () {\n            return _helpers_1.round(this.hsl.l);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "R", {\n        get: function () {\n            return _helpers_1.round(this.rgb.r);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "G", {\n        get: function () {\n            return _helpers_1.round(this.rgb.g);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "B", {\n        get: function () {\n            return _helpers_1.round(this.rgb.b);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "A", {\n        get: function () {\n            return _helpers_1.round(this.hsl.a, 2);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "C", {\n        get: function () {\n            return _helpers_1.round(this.cmyk.c);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "M", {\n        get: function () {\n            return _helpers_1.round(this.cmyk.m);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "Y", {\n        get: function () {\n            return _helpers_1.round(this.cmyk.y);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "K", {\n        get: function () {\n            return _helpers_1.round(this.cmyk.k);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HEXObject", {\n        get: function () {\n            return utils.translateColor.HEX(this.rgb);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HEXAObject", {\n        get: function () {\n            return utils.translateColor.HEXA(this.rgb);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "RGBObject", {\n        get: function () {\n            return {\n                r: this.R,\n                g: this.G,\n                b: this.B\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "RGBAObject", {\n        get: function () {\n            return __assign(__assign({}, this.RGBObject), { a: this.A });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HSLObject", {\n        get: function () {\n            return {\n                h: this.H,\n                s: this.S,\n                l: this.L\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HSLAObject", {\n        get: function () {\n            return __assign(__assign({}, this.HSLObject), { a: this.A });\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CMYKObject", {\n        get: function () {\n            return {\n                c: this.C,\n                m: this.M,\n                y: this.Y,\n                k: this.K\n            };\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HEX", {\n        get: function () {\n            var _a = this.rgb, r = _a.r, g = _a.g, b = _a.b;\n            var rgb = { r: r, g: g, b: b };\n            return css_1.CSS.HEX(rgb);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HEXA", {\n        get: function () {\n            var _a = this.rgb, r = _a.r, g = _a.g, b = _a.b;\n            var rgb = { r: r, g: g, b: b, a: this.A * 255 };\n            return css_1.CSS.HEX(rgb);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "RGB", {\n        get: function () {\n            var _a = this.rgb, r = _a.r, g = _a.g, b = _a.b;\n            var rgb = { r: r, g: g, b: b };\n            return css_1.CSS.RGB(rgb);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "RGBA", {\n        get: function () {\n            var _a = this.rgb, r = _a.r, g = _a.g, b = _a.b;\n            var rgb = { r: r, g: g, b: b, a: this.A };\n            return css_1.CSS.RGB(rgb);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HSL", {\n        get: function () {\n            var _a = this.hsl, h = _a.h, s = _a.s, l = _a.l;\n            var hsl = { h: h, s: s, l: l };\n            return css_1.CSS.HSL(hsl);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "HSLA", {\n        get: function () {\n            return css_1.CSS.HSL(this.hsl);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(ColorTranslator.prototype, "CMYK", {\n        get: function () {\n            return css_1.CSS.CMYK(this.cmyk);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    ColorTranslator.toHEX = function (color, css) {\n        if (css === void 0) { css = true; }\n        var model = utils.getColorModel(color);\n        return getReturn(color, model, css, utils.translateColor.HEX, css_1.CSS.HEX);\n    };\n    ColorTranslator.toHEXA = function (color, css) {\n        if (css === void 0) { css = true; }\n        var model = utils.getColorModel(color);\n        return getReturn(color, model, css, utils.translateColor.HEXA, css_1.CSS.HEX);\n    };\n    ColorTranslator.toRGB = function (color, css) {\n        if (css === void 0) { css = true; }\n        var model = utils.getColorModel(color);\n        return getReturn(color, model, css, utils.translateColor.RGB, css_1.CSS.RGB);\n    };\n    ColorTranslator.toRGBA = function (color, css) {\n        if (css === void 0) { css = true; }\n        var model = utils.getColorModel(color);\n        return getReturn(color, model, css, utils.translateColor.RGBA, css_1.CSS.RGB);\n    };\n    ColorTranslator.toHSL = function (color, css) {\n        if (css === void 0) { css = true; }\n        var model = utils.getColorModel(color);\n        if (model === _constants_1.ColorModel.HSL && check(color, css)) {\n            return color;\n        }\n        return getReturn(color, model, css, utils.translateColor.HSL, css_1.CSS.HSL);\n    };\n    ColorTranslator.toHSLA = function (color, css) {\n        if (css === void 0) { css = true; }\n        var model = utils.getColorModel(color);\n        if (model === _constants_1.ColorModel.HSLA && check(color, css)) {\n            return color;\n        }\n        return getReturn(color, model, css, utils.translateColor.HSLA, css_1.CSS.HSL);\n    };\n    ColorTranslator.toCMYK = function (color, css) {\n        if (css === void 0) { css = true; }\n        var model = utils.getColorModel(color);\n        if (model === _constants_1.ColorModel.CMYK && check(color, css)) {\n            return color;\n        }\n        return getReturn(color, model, css, utils.translateColor.CMYK, css_1.CSS.CMYK);\n    };\n    ColorTranslator.getBlendHEX = function (from, to, steps, css) {\n        if (steps === void 0) { steps = defaultBlendSteps; }\n        if (css === void 0) { css = true; }\n        return getBlendReturn(from, to, steps, css, utils.translateColor.HEX, css_1.CSS.HEX);\n    };\n    ColorTranslator.getBlendHEXA = function (from, to, steps, css) {\n        if (steps === void 0) { steps = defaultBlendSteps; }\n        if (css === void 0) { css = true; }\n        return getBlendReturn(from, to, steps, css, utils.translateColor.HEXA, css_1.CSS.HEX);\n    };\n    ColorTranslator.getBlendRGB = function (from, to, steps, css) {\n        if (steps === void 0) { steps = defaultBlendSteps; }\n        if (css === void 0) { css = true; }\n        return getBlendReturn(from, to, steps, css, utils.translateColor.RGB, css_1.CSS.RGB);\n    };\n    ColorTranslator.getBlendRGBA = function (from, to, steps, css) {\n        if (steps === void 0) { steps = defaultBlendSteps; }\n        if (css === void 0) { css = true; }\n        return getBlendReturn(from, to, steps, css, utils.translateColor.RGBA, css_1.CSS.RGB);\n    };\n    ColorTranslator.getBlendHSL = function (from, to, steps, css) {\n        if (steps === void 0) { steps = defaultBlendSteps; }\n        if (css === void 0) { css = true; }\n        return getBlendReturn(from, to, steps, css, utils.translateColor.HSL, css_1.CSS.HSL);\n    };\n    ColorTranslator.getBlendHSLA = function (from, to, steps, css) {\n        if (steps === void 0) { steps = defaultBlendSteps; }\n        if (css === void 0) { css = true; }\n        return getBlendReturn(from, to, steps, css, utils.translateColor.HSLA, css_1.CSS.HSL);\n    };\n    ColorTranslator.getMixHEX = function (colors, mode, css) {\n        if (mode === void 0) { mode = _constants_1.Mix.ADDITIVE; }\n        if (css === void 0) { css = true; }\n        return utils.colorMixer.HEX(colors, mode, css);\n    };\n    ColorTranslator.getMixHEXA = function (colors, mode, css) {\n        if (mode === void 0) { mode = _constants_1.Mix.ADDITIVE; }\n        if (css === void 0) { css = true; }\n        return utils.colorMixer.HEXA(colors, mode, css);\n    };\n    ColorTranslator.getMixRGB = function (colors, mode, css) {\n        if (mode === void 0) { mode = _constants_1.Mix.ADDITIVE; }\n        if (css === void 0) { css = true; }\n        return utils.colorMixer.RGB(colors, mode, css);\n    };\n    ColorTranslator.getMixRGBA = function (colors, mode, css) {\n        if (mode === void 0) { mode = _constants_1.Mix.ADDITIVE; }\n        if (css === void 0) { css = true; }\n        return utils.colorMixer.RGBA(colors, mode, css);\n    };\n    ColorTranslator.getMixHSL = function (colors, mode, css) {\n        if (mode === void 0) { mode = _constants_1.Mix.ADDITIVE; }\n        if (css === void 0) { css = true; }\n        return utils.colorMixer.HSL(colors, mode, css);\n    };\n    ColorTranslator.getMixHSLA = function (colors, mode, css) {\n        if (mode === void 0) { mode = _constants_1.Mix.ADDITIVE; }\n        if (css === void 0) { css = true; }\n        return utils.colorMixer.HSLA(colors, mode, css);\n    };\n    ColorTranslator.getShades = function (color, shades) {\n        return utils.getColorMixture(color, shades, true);\n    };\n    ColorTranslator.getTints = function (color, tints) {\n        return utils.getColorMixture(color, tints, false);\n    };\n    ColorTranslator.getHarmony = function (color, armony, mode) {\n        if (armony === void 0) { armony = _constants_1.Harmony.COMPLEMENTARY; }\n        if (mode === void 0) { mode = _constants_1.Mix.ADDITIVE; }\n        switch (armony) {\n            case _constants_1.Harmony.ANALOGOUS:\n                return utils.colorHarmony.buildHarmony(color, utils.analogous, mode);\n            case _constants_1.Harmony.SPLIT_COMPLEMENTARY:\n                return utils.colorHarmony.buildHarmony(color, utils.splitComplementary, mode);\n            case _constants_1.Harmony.TRIADIC:\n                return utils.colorHarmony.buildHarmony(color, utils.triadic, mode);\n            case _constants_1.Harmony.TETRADIC:\n                return utils.colorHarmony.buildHarmony(color, utils.tetradic, mode);\n            case _constants_1.Harmony.SQUARE:\n                return utils.colorHarmony.buildHarmony(color, utils.square, mode);\n            default:\n                return utils.colorHarmony.buildHarmony(color, utils.complementary, mode);\n        }\n    };\n    return ColorTranslator;\n}());\nexports.ColorTranslator = ColorTranslator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///607\n')},423:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/google-code-prettify/bin/run_prettify.min.js\nvar run_prettify_min = __webpack_require__(538);\n;// CONCATENATED MODULE: ./node_modules/whatwg-fetch/fetch.js\nvar global =\n  (typeof globalThis !== 'undefined' && globalThis) ||\n  (typeof self !== 'undefined' && self) ||\n  (typeof global !== 'undefined' && global)\n\nvar support = {\n  searchParams: 'URLSearchParams' in global,\n  iterable: 'Symbol' in global && 'iterator' in Symbol,\n  blob:\n    'FileReader' in global &&\n    'Blob' in global &&\n    (function() {\n      try {\n        new Blob()\n        return true\n      } catch (e) {\n        return false\n      }\n    })(),\n  formData: 'FormData' in global,\n  arrayBuffer: 'ArrayBuffer' in global\n}\n\nfunction isDataView(obj) {\n  return obj && DataView.prototype.isPrototypeOf(obj)\n}\n\nif (support.arrayBuffer) {\n  var viewClasses = [\n    '[object Int8Array]',\n    '[object Uint8Array]',\n    '[object Uint8ClampedArray]',\n    '[object Int16Array]',\n    '[object Uint16Array]',\n    '[object Int32Array]',\n    '[object Uint32Array]',\n    '[object Float32Array]',\n    '[object Float64Array]'\n  ]\n\n  var isArrayBufferView =\n    ArrayBuffer.isView ||\n    function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n}\n\nfunction normalizeName(name) {\n  if (typeof name !== 'string') {\n    name = String(name)\n  }\n  if (/[^a-z0-9\\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {\n    throw new TypeError('Invalid character in header field name: \"' + name + '\"')\n  }\n  return name.toLowerCase()\n}\n\nfunction normalizeValue(value) {\n  if (typeof value !== 'string') {\n    value = String(value)\n  }\n  return value\n}\n\n// Build a destructive iterator for the value list\nfunction iteratorFor(items) {\n  var iterator = {\n    next: function() {\n      var value = items.shift()\n      return {done: value === undefined, value: value}\n    }\n  }\n\n  if (support.iterable) {\n    iterator[Symbol.iterator] = function() {\n      return iterator\n    }\n  }\n\n  return iterator\n}\n\nfunction Headers(headers) {\n  this.map = {}\n\n  if (headers instanceof Headers) {\n    headers.forEach(function(value, name) {\n      this.append(name, value)\n    }, this)\n  } else if (Array.isArray(headers)) {\n    headers.forEach(function(header) {\n      this.append(header[0], header[1])\n    }, this)\n  } else if (headers) {\n    Object.getOwnPropertyNames(headers).forEach(function(name) {\n      this.append(name, headers[name])\n    }, this)\n  }\n}\n\nHeaders.prototype.append = function(name, value) {\n  name = normalizeName(name)\n  value = normalizeValue(value)\n  var oldValue = this.map[name]\n  this.map[name] = oldValue ? oldValue + ', ' + value : value\n}\n\nHeaders.prototype['delete'] = function(name) {\n  delete this.map[normalizeName(name)]\n}\n\nHeaders.prototype.get = function(name) {\n  name = normalizeName(name)\n  return this.has(name) ? this.map[name] : null\n}\n\nHeaders.prototype.has = function(name) {\n  return this.map.hasOwnProperty(normalizeName(name))\n}\n\nHeaders.prototype.set = function(name, value) {\n  this.map[normalizeName(name)] = normalizeValue(value)\n}\n\nHeaders.prototype.forEach = function(callback, thisArg) {\n  for (var name in this.map) {\n    if (this.map.hasOwnProperty(name)) {\n      callback.call(thisArg, this.map[name], name, this)\n    }\n  }\n}\n\nHeaders.prototype.keys = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push(name)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.values = function() {\n  var items = []\n  this.forEach(function(value) {\n    items.push(value)\n  })\n  return iteratorFor(items)\n}\n\nHeaders.prototype.entries = function() {\n  var items = []\n  this.forEach(function(value, name) {\n    items.push([name, value])\n  })\n  return iteratorFor(items)\n}\n\nif (support.iterable) {\n  Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n}\n\nfunction consumed(body) {\n  if (body.bodyUsed) {\n    return Promise.reject(new TypeError('Already read'))\n  }\n  body.bodyUsed = true\n}\n\nfunction fileReaderReady(reader) {\n  return new Promise(function(resolve, reject) {\n    reader.onload = function() {\n      resolve(reader.result)\n    }\n    reader.onerror = function() {\n      reject(reader.error)\n    }\n  })\n}\n\nfunction readBlobAsArrayBuffer(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsArrayBuffer(blob)\n  return promise\n}\n\nfunction readBlobAsText(blob) {\n  var reader = new FileReader()\n  var promise = fileReaderReady(reader)\n  reader.readAsText(blob)\n  return promise\n}\n\nfunction readArrayBufferAsText(buf) {\n  var view = new Uint8Array(buf)\n  var chars = new Array(view.length)\n\n  for (var i = 0; i < view.length; i++) {\n    chars[i] = String.fromCharCode(view[i])\n  }\n  return chars.join('')\n}\n\nfunction bufferClone(buf) {\n  if (buf.slice) {\n    return buf.slice(0)\n  } else {\n    var view = new Uint8Array(buf.byteLength)\n    view.set(new Uint8Array(buf))\n    return view.buffer\n  }\n}\n\nfunction Body() {\n  this.bodyUsed = false\n\n  this._initBody = function(body) {\n    /*\n      fetch-mock wraps the Response object in an ES6 Proxy to\n      provide useful test harness features such as flush. However, on\n      ES5 browsers without fetch or Proxy support pollyfills must be used;\n      the proxy-pollyfill is unable to proxy an attribute unless it exists\n      on the object before the Proxy is created. This change ensures\n      Response.bodyUsed exists on the instance, while maintaining the\n      semantic of setting Request.bodyUsed in the constructor before\n      _initBody is called.\n    */\n    this.bodyUsed = this.bodyUsed\n    this._bodyInit = body\n    if (!body) {\n      this._bodyText = ''\n    } else if (typeof body === 'string') {\n      this._bodyText = body\n    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n      this._bodyBlob = body\n    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n      this._bodyFormData = body\n    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n      this._bodyText = body.toString()\n    } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n      this._bodyArrayBuffer = bufferClone(body.buffer)\n      // IE 10-11 can't handle a DataView body.\n      this._bodyInit = new Blob([this._bodyArrayBuffer])\n    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n      this._bodyArrayBuffer = bufferClone(body)\n    } else {\n      this._bodyText = body = Object.prototype.toString.call(body)\n    }\n\n    if (!this.headers.get('content-type')) {\n      if (typeof body === 'string') {\n        this.headers.set('content-type', 'text/plain;charset=UTF-8')\n      } else if (this._bodyBlob && this._bodyBlob.type) {\n        this.headers.set('content-type', this._bodyBlob.type)\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n      }\n    }\n  }\n\n  if (support.blob) {\n    this.blob = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return Promise.resolve(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as blob')\n      } else {\n        return Promise.resolve(new Blob([this._bodyText]))\n      }\n    }\n\n    this.arrayBuffer = function() {\n      if (this._bodyArrayBuffer) {\n        var isConsumed = consumed(this)\n        if (isConsumed) {\n          return isConsumed\n        }\n        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {\n          return Promise.resolve(\n            this._bodyArrayBuffer.buffer.slice(\n              this._bodyArrayBuffer.byteOffset,\n              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength\n            )\n          )\n        } else {\n          return Promise.resolve(this._bodyArrayBuffer)\n        }\n      } else {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n    }\n  }\n\n  this.text = function() {\n    var rejected = consumed(this)\n    if (rejected) {\n      return rejected\n    }\n\n    if (this._bodyBlob) {\n      return readBlobAsText(this._bodyBlob)\n    } else if (this._bodyArrayBuffer) {\n      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n    } else if (this._bodyFormData) {\n      throw new Error('could not read FormData body as text')\n    } else {\n      return Promise.resolve(this._bodyText)\n    }\n  }\n\n  if (support.formData) {\n    this.formData = function() {\n      return this.text().then(decode)\n    }\n  }\n\n  this.json = function() {\n    return this.text().then(JSON.parse)\n  }\n\n  return this\n}\n\n// HTTP methods whose capitalization should be normalized\nvar methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\nfunction normalizeMethod(method) {\n  var upcased = method.toUpperCase()\n  return methods.indexOf(upcased) > -1 ? upcased : method\n}\n\nfunction Request(input, options) {\n  if (!(this instanceof Request)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n\n  options = options || {}\n  var body = options.body\n\n  if (input instanceof Request) {\n    if (input.bodyUsed) {\n      throw new TypeError('Already read')\n    }\n    this.url = input.url\n    this.credentials = input.credentials\n    if (!options.headers) {\n      this.headers = new Headers(input.headers)\n    }\n    this.method = input.method\n    this.mode = input.mode\n    this.signal = input.signal\n    if (!body && input._bodyInit != null) {\n      body = input._bodyInit\n      input.bodyUsed = true\n    }\n  } else {\n    this.url = String(input)\n  }\n\n  this.credentials = options.credentials || this.credentials || 'same-origin'\n  if (options.headers || !this.headers) {\n    this.headers = new Headers(options.headers)\n  }\n  this.method = normalizeMethod(options.method || this.method || 'GET')\n  this.mode = options.mode || this.mode || null\n  this.signal = options.signal || this.signal\n  this.referrer = null\n\n  if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n    throw new TypeError('Body not allowed for GET or HEAD requests')\n  }\n  this._initBody(body)\n\n  if (this.method === 'GET' || this.method === 'HEAD') {\n    if (options.cache === 'no-store' || options.cache === 'no-cache') {\n      // Search for a '_' parameter in the query string\n      var reParamSearch = /([?&])_=[^&]*/\n      if (reParamSearch.test(this.url)) {\n        // If it already exists then set the value with the current time\n        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())\n      } else {\n        // Otherwise add a new '_' parameter to the end with the current time\n        var reQueryString = /\\?/\n        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()\n      }\n    }\n  }\n}\n\nRequest.prototype.clone = function() {\n  return new Request(this, {body: this._bodyInit})\n}\n\nfunction decode(body) {\n  var form = new FormData()\n  body\n    .trim()\n    .split('&')\n    .forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n  return form\n}\n\nfunction parseHeaders(rawHeaders) {\n  var headers = new Headers()\n  // Replace instances of \\r\\n and \\n followed by at least one space or horizontal tab with a space\n  // https://tools.ietf.org/html/rfc7230#section-3.2\n  var preProcessedHeaders = rawHeaders.replace(/\\r?\\n[\\t ]+/g, ' ')\n  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill\n  // https://github.com/github/fetch/issues/748\n  // https://github.com/zloirock/core-js/issues/751\n  preProcessedHeaders\n    .split('\\r')\n    .map(function(header) {\n      return header.indexOf('\\n') === 0 ? header.substr(1, header.length) : header\n    })\n    .forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n  return headers\n}\n\nBody.call(Request.prototype)\n\nfunction Response(bodyInit, options) {\n  if (!(this instanceof Response)) {\n    throw new TypeError('Please use the \"new\" operator, this DOM object constructor cannot be called as a function.')\n  }\n  if (!options) {\n    options = {}\n  }\n\n  this.type = 'default'\n  this.status = options.status === undefined ? 200 : options.status\n  this.ok = this.status >= 200 && this.status < 300\n  this.statusText = options.statusText === undefined ? '' : '' + options.statusText\n  this.headers = new Headers(options.headers)\n  this.url = options.url || ''\n  this._initBody(bodyInit)\n}\n\nBody.call(Response.prototype)\n\nResponse.prototype.clone = function() {\n  return new Response(this._bodyInit, {\n    status: this.status,\n    statusText: this.statusText,\n    headers: new Headers(this.headers),\n    url: this.url\n  })\n}\n\nResponse.error = function() {\n  var response = new Response(null, {status: 0, statusText: ''})\n  response.type = 'error'\n  return response\n}\n\nvar redirectStatuses = [301, 302, 303, 307, 308]\n\nResponse.redirect = function(url, status) {\n  if (redirectStatuses.indexOf(status) === -1) {\n    throw new RangeError('Invalid status code')\n  }\n\n  return new Response(null, {status: status, headers: {location: url}})\n}\n\nvar DOMException = global.DOMException\ntry {\n  new DOMException()\n} catch (err) {\n  DOMException = function(message, name) {\n    this.message = message\n    this.name = name\n    var error = Error(message)\n    this.stack = error.stack\n  }\n  DOMException.prototype = Object.create(Error.prototype)\n  DOMException.prototype.constructor = DOMException\n}\n\nfunction fetch_fetch(input, init) {\n  return new Promise(function(resolve, reject) {\n    var request = new Request(input, init)\n\n    if (request.signal && request.signal.aborted) {\n      return reject(new DOMException('Aborted', 'AbortError'))\n    }\n\n    var xhr = new XMLHttpRequest()\n\n    function abortXhr() {\n      xhr.abort()\n    }\n\n    xhr.onload = function() {\n      var options = {\n        status: xhr.status,\n        statusText: xhr.statusText,\n        headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n      }\n      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n      var body = 'response' in xhr ? xhr.response : xhr.responseText\n      setTimeout(function() {\n        resolve(new Response(body, options))\n      }, 0)\n    }\n\n    xhr.onerror = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.ontimeout = function() {\n      setTimeout(function() {\n        reject(new TypeError('Network request failed'))\n      }, 0)\n    }\n\n    xhr.onabort = function() {\n      setTimeout(function() {\n        reject(new DOMException('Aborted', 'AbortError'))\n      }, 0)\n    }\n\n    function fixUrl(url) {\n      try {\n        return url === '' && global.location.href ? global.location.href : url\n      } catch (e) {\n        return url\n      }\n    }\n\n    xhr.open(request.method, fixUrl(request.url), true)\n\n    if (request.credentials === 'include') {\n      xhr.withCredentials = true\n    } else if (request.credentials === 'omit') {\n      xhr.withCredentials = false\n    }\n\n    if ('responseType' in xhr) {\n      if (support.blob) {\n        xhr.responseType = 'blob'\n      } else if (\n        support.arrayBuffer &&\n        request.headers.get('Content-Type') &&\n        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1\n      ) {\n        xhr.responseType = 'arraybuffer'\n      }\n    }\n\n    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {\n      Object.getOwnPropertyNames(init.headers).forEach(function(name) {\n        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))\n      })\n    } else {\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n    }\n\n    if (request.signal) {\n      request.signal.addEventListener('abort', abortXhr)\n\n      xhr.onreadystatechange = function() {\n        // DONE (success or failure)\n        if (xhr.readyState === 4) {\n          request.signal.removeEventListener('abort', abortXhr)\n        }\n      }\n    }\n\n    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n  })\n}\n\nfetch_fetch.polyfill = true\n\nif (!global.fetch) {\n  global.fetch = fetch_fetch\n  global.Headers = Headers\n  global.Request = Request\n  global.Response = Response\n}\n\n// EXTERNAL MODULE: ./src/index.ts\nvar src = __webpack_require__(607);\n;// CONCATENATED MODULE: ./src/@demo/demo1/index.js\n\n\n/* harmony default export */ const demo1 = ((ColorTranslator) => {\n\n    const container = document.createElement('div');\n    const color = new ColorTranslator('hsl(180,100%,50%)');\n\n    for (let row = 0; row < 10; row++) {\n\n        for (let col = 0; col < 10; col++) {\n\n            color\n                .setS(row * 10)\n                .setL(col * 5 + 30);\n                \n            const box = document.createElement('div');\n\n            box.classList.add('box');\n            box.style.background = color.HEX;\n\n            box.innerText =\n                `R:${color.R}\n                 G:${color.G}\n                 B:${color.B}`;\n            container.appendChild(box);\n\n        }\n    }\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo2/index.js\n\n\n/* harmony default export */ const demo2 = ((ColorTranslator) => {\n\n    const container = document.createElement('div');\n    const color = new ColorTranslator({ r: 255, g: 0, b: 0 });\n    const hue = [0, 30, 60, 120, 240, 280, 320, 0];\n    let rainbow;\n\n    for (let r = 0; r < hue.length; r++) {\n\n        color.setH(hue[r]);\n\n        const bow = document.createElement('div');\n\n        bow.classList.add('rainbow');\n        bow.style.background = color.HEX;\n\n        if (rainbow) {\n            rainbow.appendChild(bow);\n        } else {\n            container.appendChild(bow);\n        }\n\n        rainbow = bow;\n    }\n\n    rainbow.style.background = '#333';\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo3/index.js\n\n\n/* harmony default export */ const demo3 = ((ColorTranslator) => {\n\n    const container = document.createElement('div');\n    const hsl = { h: 0, s: '90%', l: '50%' };\n    const hue = [undefined, 55, 30, 0, 290, 220, 130];\n    const total = hue.length;\n\n    for (let row = 0; row < total; row++) {\n\n        for (let col = 0; col < total; col++) {\n\n            let index = total - row + col;\n            if (index >= total) {\n                index -= total;\n            }\n            hsl.h = hue[index];\n            const rgb = hue[index] === undefined\n                ? '#FFF'\n                : ColorTranslator.toHEX(hsl);\n            const box = document.createElement('div');\n\n            box.classList.add('flag');\n            box.style.background = rgb;\n\n            container.appendChild(box);\n\n        }\n    }\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo4/index.js\n\n\n/* harmony default export */ const demo4 = ((ColorTranslator) => {\n\n    const container = document.createElement('div');\n    const colors = [\n        '#FF0000',\n        '#00FF00',\n        '#0000FF',\n        '#00FFFF',\n        '#FFFF00',\n        '#FF00FF'\n    ];\n    const total = colors.length;\n\n    for (let row = 0; row < total; row++) {\n\n        const hsl = ColorTranslator.toHSL(colors[row], false);\n        const step = hsl.s / (total - 1);\n\n        for (let col = 0; col < total; col++) {\n\n            const rgb = ColorTranslator.toHEX(hsl);\n            const cmyk = ColorTranslator.toCMYK(hsl, false);\n\n            const box = document.createElement('div');\n            box.classList.add('box');\n            box.style.background = rgb;\n            box.innerText = `C:${cmyk.c}\n                             M:${cmyk.m}\n                             Y:${cmyk.y}\n                             K:${cmyk.k}`;\n\n            container.appendChild(box);\n\n            hsl.s -= step;\n\n        }\n    }\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo5/index.js\n\n\n/* harmony default export */ const demo5 = ((ColorTranslator) => {\n\n    const container = document.createElement('div');\n    const rows = 11;\n    const mult = 3;\n\n    for (let i = 0; i < rows; i++) {\n\n        const blends = ColorTranslator.getBlendHEX('#FF0000', '#FFFF00', mult + i * mult);\n\n        blends.forEach((blend, index) => {\n            const box = document.createElement('div');\n            box.classList.add('box', `file${i}`);\n            box.style.background = blend;\n            box.innerText = index + 1;\n            container.appendChild(box);\n        });\n\n    }\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo6/index.js\n\n\n/* harmony default export */ const demo6 = ((ColorTranslator) => {\n\n    const container = document.createElement('div');\n    \n    const colors = ['#F00', '#FF8000', '#FF0', '#0F0', '#00F', '#AA00FF', '#FF00AA'];\n\n    const createBox = (color, type) => {\n        const box = document.createElement('div');\n        box.classList.add('box');\n        box.style.backgroundColor = color;\n        if (type) box.dataset.type = type;\n        container.appendChild(box);\n    };\n\n    colors.forEach((color) => {\n        const shades = ColorTranslator.getShades(color, 3).reverse();\n        const tints = ColorTranslator.getTints(color, 3);        \n        shades.forEach((shade) => createBox(shade, 'shade'));\n        createBox(color);\n        tints.forEach((tint) => createBox(tint, 'tint'));\n    });\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo7/index.js\n\n\n\n/* harmony default export */ const demo7 = ((ColorTranslator) => {\n\n    const container = document.createElement('div');\n\n    const mixes = [\n        '#FF0000',\n        '#00FF00',\n        '#0000FF',\n        [1, 3],\n        [1, 2],\n        [2, 3],\n        [1, 2, 3]\n    ];\n    \n    const fillPlanes = () => {\n        const planes = container.querySelectorAll('#planes path');\n        planes.forEach((plane, index) => {\n            let color = '#CCCCCC';\n            if (typeof mixes[index] === 'string') {\n                color = mixes[index];\n            } else if(mixes[index]) {\n                const colors = mixes[index].map((i) => mixes[i - 1]);\n                color = mixes[index] = ColorTranslator.getMixHEX(colors);           \n            }  \n            plane.setAttribute('fill', color);\n        });\n    };\n\n    fetch('images/color-mixes.svg')\n        .then(result => result.text())\n        .then((svgCode) => {\n            container.innerHTML = svgCode;\n            fillPlanes();\n        });\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo8/index.js\n\n\n/* harmony default export */ const demo8 = ((ColorTranslator, { Mix }) => {\n\n    const container = document.createElement('div');\n\n    const mixes = [\n        '#FF0000',\n        '#FFFF00',\n        '#0000FF',\n        [1, 3],\n        [1, 2],\n        [2, 3],\n        [1, 2, 3]\n    ];\n    \n    const fillPlanes = () => {\n        const planes = container.querySelectorAll('#planes path');\n        planes.forEach((plane, index) => {\n            let color = '#CCCCCC';\n            if (typeof mixes[index] === 'string') {\n                color = mixes[index];\n            } else if(mixes[index]) {\n                const colors = mixes[index].map((i) => mixes[i - 1]);\n                color = mixes[index] = ColorTranslator.getMixHEX(colors, Mix.SUBTRACTIVE);           \n            }  \n            plane.setAttribute('fill', color);\n        });\n    };\n\n    fetch('images/color-mixes.svg')\n        .then(result => result.text())\n        .then((svgCode) => {\n            container.innerHTML = svgCode;\n            fillPlanes();\n        });\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo9/index.js\n\n\n/* harmony default export */ const demo9 = ((ColorTranslator, { Harmony }) => {\n\n    const container = document.createElement('div');\n\n    const harmonies = [\n        { label: 'Complementary',       value: Harmony.COMPLEMENTARY },\n        { label: 'Split Complementary', value: Harmony.SPLIT_COMPLEMENTARY },\n        { label: 'Analogous',           value: Harmony.ANALOGOUS },\n        { label: 'Triadic',             value: Harmony.TRIADIC },\n        { label: 'Tetradic',            value: Harmony.TETRADIC },\n        { label: 'Square',              value: Harmony.SQUARE }\n    ];\n\n    const baseColor = '#F00';\n\n    const createElement = (className, parent) => {\n        const div = document.createElement('div');\n        div.classList.add(className);\n        parent.appendChild(div);\n        return div;\n    };\n\n    const createHarmony = (item) => {\n\n        const wrapper = createElement('wrapper', container);\n        const wheel = createElement('wheel', wrapper);\n        const harmony = createElement('harmony', wrapper);\n        createElement('label', wrapper).innerText = item.label;\n\n        fetch('images/wheel-additive.svg')\n            .then(result => result.text())\n            .then((svgCode) => {\n                const harmonyColors = ColorTranslator.getHarmony(baseColor, item.value);\n                const selector = 'path' + harmonyColors.map((color) => `:not([fill=\"${color}\"])`).join('');\n                wheel.innerHTML = svgCode;                \n                harmonyColors.forEach((hex) => createElement('box', harmony).style.background = hex);                \n                wheel.querySelectorAll(selector).forEach((path) => path.setAttribute('fill-opacity', '0.25'));\n            });\n            \n    };\n\n    harmonies.forEach((item) => createHarmony(item));\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo10/index.js\n\n\n/* harmony default export */ const demo10 = ((ColorTranslator, { Harmony, Mix }) => {\n\n    const container = document.createElement('div');\n\n    const harmonies = [\n        { label: 'Complementary',       value: Harmony.COMPLEMENTARY },\n        { label: 'Split Complementary', value: Harmony.SPLIT_COMPLEMENTARY },\n        { label: 'Analogous',           value: Harmony.ANALOGOUS },\n        { label: 'Triadic',             value: Harmony.TRIADIC },\n        { label: 'Tetradic',            value: Harmony.TETRADIC },\n        { label: 'Square',              value: Harmony.SQUARE }\n    ];\n\n    const baseColor = '#F00';\n\n    const createElement = (className, parent) => {\n        const div = document.createElement('div');\n        div.classList.add(className);\n        parent.appendChild(div);\n        return div;\n    };\n\n    const createHarmony = (item) => {\n\n        const wrapper = createElement('wrapper', container);\n        const wheel = createElement('wheel', wrapper);\n        const harmony = createElement('harmony', wrapper);\n        createElement('label', wrapper).innerText = item.label;\n\n        fetch('images/wheel-subtractive.svg')\n            .then(result => result.text())\n            .then((svgCode) => {\n                const harmonyColors = ColorTranslator.getHarmony(baseColor, item.value, Mix.SUBTRACTIVE);\n                const selector = 'path' + harmonyColors.map((color) => `:not([fill=\"${color}\"])`).join('');\n                wheel.innerHTML = svgCode;                \n                harmonyColors.forEach((hex) => createElement('box', harmony).style.background = hex);                \n                wheel.querySelectorAll(selector).forEach((path) => path.setAttribute('fill-opacity', '0.25'));\n            });\n            \n    };\n\n    harmonies.forEach((item) => createHarmony(item));\n\n    return container;\n\n});\n;// CONCATENATED MODULE: ./src/@demo/demo.js\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst functioToString = (fn) => {\n    const article = document.createElement('article');\n    const pre = document.createElement('pre');\n    article.classList.add('function-container');\n    pre.classList.add('prettyprint');\n    article.appendChild(pre);\n    pre.innerHTML = fn.toString().replace('(ColorTranslator)', '()');\n    return article;\n};\n\nconst demos = new Map([\n    ['demo1', demo1],\n    ['demo2', demo2],\n    ['demo3', demo3],\n    ['demo4', demo4],\n    ['demo5', demo5],\n    ['demo6', demo6],\n    ['demo7', demo7],\n    ['demo8', demo8],\n    ['demo9', demo9],\n    ['demo10', demo10],\n]);\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    demos.forEach((module, div) => {\n        const demo = document.getElementById(div);\n        const container = document.createElement('div');\n        const wrapper = document.createElement('div');\n        \n        container.classList.add('demo-container');\n        wrapper.classList.add('demo-wrapper');\n\n        wrapper.appendChild(module(src.ColorTranslator, { Harmony: src.Harmony, Mix: src.Mix }));\n        container.appendChild(wrapper);\n        demo.appendChild(container);\n        demo.appendChild(functioToString(module));\n    });\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///423\n")}},__webpack_module_cache__={};function __webpack_require__(I){var g=__webpack_module_cache__[I];if(void 0!==g)return g.exports;var n=__webpack_module_cache__[I]={exports:{}};return __webpack_modules__[I].call(n.exports,n,n.exports,__webpack_require__),n.exports}__webpack_require__.r=I=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__(423),__webpack_export_target__=window;for(var i in __webpack_exports__)__webpack_export_target__[i]=__webpack_exports__[i];__webpack_exports__.__esModule&&Object.defineProperty(__webpack_export_target__,"__esModule",{value:!0})})();